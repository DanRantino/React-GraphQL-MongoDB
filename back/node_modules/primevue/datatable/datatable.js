this.primevue = this.primevue || {};
this.primevue.datatable = (function (utils, Paginator, vue, Ripple) {
    'use strict';

    function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

    var Paginator__default = /*#__PURE__*/_interopDefaultLegacy(Paginator);
    var Ripple__default = /*#__PURE__*/_interopDefaultLegacy(Ripple);

    var script = {
        props: {
            columns: {
                type: null,
                default: null
            },
            rows: {
                type: null,
                default: null
            }
        }
    };

    const _hoisted_1 = { class: "p-datatable-tbody" };

    function render(_ctx, _cache, $props, $setup, $data, $options) {
      return (vue.openBlock(), vue.createBlock("tbody", _hoisted_1, [
        (vue.openBlock(true), vue.createBlock(vue.Fragment, null, vue.renderList($props.rows, (n) => {
          return (vue.openBlock(), vue.createBlock("tr", { key: n }, [
            (vue.openBlock(true), vue.createBlock(vue.Fragment, null, vue.renderList($props.columns, (col, i) => {
              return (vue.openBlock(), vue.createBlock("td", {
                key: col.props.columnKey||col.props.field||i
              }, [
                (col.children && col.children.loading)
                  ? (vue.openBlock(), vue.createBlock(vue.resolveDynamicComponent(col.children.loading), {
                      key: 0,
                      column: col,
                      index: i
                    }, null, 8, ["column", "index"]))
                  : vue.createCommentVNode("", true)
              ]))
            }), 128))
          ]))
        }), 128))
      ]))
    }

    script.render = render;

    var script$1 = {
        emits: ['virtual-scroll'],
        props: {
            frozen: {
                type: Boolean,
                default: false
            },
            frozenWidth: {
                type: String,
                default: null
            },
            columns: {
                type: null,
                default: null
            },
            headerColumnGroup: {
                type: null,
                default: null
            },
            footerColumnGroup: {
                type: null,
                default: null
            },
            scrollHeight: {
                type: String,
                default: null
            },
            virtualScroll: {
                type: Boolean,
                default: false
            },
            virtualRowHeight: {
                type: Number,
                default: null
            },
            rows: {
                type: Number,
                default: null,
            },
            totalRecords: {
                type: Number,
                default: 0
            },
            rowGroupMode: {
                type: String,
                default: null
            },
            groupRowsBy: {
                type: [Array,String],
                default: null
            }
        },
        virtualScrollCallback: null,
        mounted() {
            if (!this.frozen)
                this.alignScrollBar();
            else
                this.$refs.scrollBody.style.paddingBottom = utils.DomHandler.calculateScrollbarWidth() + 'px';

            if (this.virtualScroll) {
                this.$refs.virtualScroller.style.height = this.totalRecords * this.virtualRowHeight + 'px';
            }
        },
        updated() {
            if (this.virtualScrollCallback) {
                this.virtualScrollCallback();
                this.virtualScrollCallback = null;
            }
        },
        watch: {
            totalRecords(newValue) {
                if (this.virtualScroll) {
                    this.$refs.virtualScroller.style.height = newValue * this.virtualRowHeight + 'px';
                }
            }
        },
        methods: {
            columnProp(col, prop) {
                return col.props ? ((col.type.props[prop].type === Boolean && col.props[prop] === '') ? true : col.props[prop]) : null;
            },
            onHeaderScroll() {
                this.$refs.scrollHeader.scrollLeft = 0;
            },
            onBodyScroll() {
                let frozenView = this.$el.previousElementSibling;
                let frozenScrollBody;
                if (frozenView) {
                    frozenScrollBody = utils.DomHandler.findSingle(frozenView, '.p-datatable-scrollable-body');
                }

                if (frozenScrollBody) {
                    frozenScrollBody.scrollTop = this.$refs.scrollBody.scrollTop;
                }

                this.$refs.scrollHeaderBox.style.marginLeft = -1 * this.$refs.scrollBody.scrollLeft + 'px';
                if (this.$refs.scrollFooterBox) {
                    this.$refs.scrollFooterBox.style.marginLeft = -1 * this.$refs.scrollBody.scrollLeft + 'px';
                }

                if (this.virtualScroll) {
                    let viewport = utils.DomHandler.getClientHeight(this.$refs.scrollBody);
                    let tableHeight = utils.DomHandler.getOuterHeight(this.$refs.scrollTable);
                    let pageHeight = this.virtualRowHeight * this.rows;
                    let virtualTableHeight = utils.DomHandler.getOuterHeight(this.$refs.virtualScroller);
                    let pageCount = (virtualTableHeight / pageHeight)||1;
                    let scrollBodyTop = this.$refs.scrollTable.style.top||'0';

                    if(this.$refs.scrollBody.scrollTop + viewport > parseFloat(scrollBodyTop) + tableHeight || this.$refs.scrollBody.scrollTop < parseFloat(scrollBodyTop)) {
                        if (this.$refs.loadingTable) {
                            this.$refs.loadingTable.style.display = 'table';
                            this.$refs.loadingTable.style.top = this.$refs.scrollBody.scrollTop + 'px';
                        }

                        let page = Math.floor((this.$refs.scrollBody.scrollTop * pageCount) / (this.$refs.scrollBody.scrollHeight)) + 1;
                        this.$emit('virtual-scroll', {
                            page: page
                        });

                        this.virtualScrollCallback = () => {
                            if (this.$refs.loadingTable) {
                                this.$refs.loadingTable.style.display = 'none';
                            }

                            this.$refs.scrollTable.style.top = ((page - 1) * pageHeight) + 'px';
                        };
                    }
                }
            },
            alignScrollBar() {
                let scrollBarWidth = utils.DomHandler.calculateScrollbarWidth();

                this.$refs.scrollHeaderBox.style.paddingRight = scrollBarWidth + 'px';
                if (this.$refs.scrollFooterBox) {
                    this.$refs.scrollFooterBox.style.paddingRight = scrollBarWidth + 'px';
                }
            },
            shouldRenderCol(column) {
                if (this.rowGroupMode && this.rowGroupMode === 'subheader') {
                    return this.groupRowsBy !== this.columnProp(column, 'field');
                }

                return true;
            }
        },
        computed: {
            containerClass() {
                return ['p-datatable-scrollable-view', {'p-datatable-frozen-view': this.frozen, 'p-datatable-unfrozen-view': !this.frozen && this.frozenWidth}];
            },
            containerStyle() {
                if (this.frozenWidth) {
                    if (this.frozen) {
                        return {
                            width: this.frozenWidth
                        };
                    }
                    else {
                        return {
                            width: 'calc(100% - ' + this.frozenWidth + ')',
                            left: this.frozenWidth
                        }
                    }
                }
                else {
                    return null;
                }
            },
            bodyTableClass() {
                return ['p-datatable-scrollable-body-table', {'p-datatable-virtual-table': this.virtualScroll}];
            },
            bodyTableStyle() {
                return this.virtualScroll ? {top: '0'} : null;
            },
            bodyStyle() {
                return {
                    maxHeight: this.scrollHeight !== 'flex' ? this.scrollHeight: null,
                    overflowY: !this.frozen && this.scrollHeight ? 'scroll': null
                }
            }
        },
        components: {
            'DTTableLoadingBody': script
        }
    };

    const _hoisted_1$1 = {
      class: "p-datatable-scrollable-header-box",
      ref: "scrollHeaderBox"
    };
    const _hoisted_2 = { class: "p-datatable-scrollable-header-table" };
    const _hoisted_3 = {
      key: 0,
      ref: "loadingTable",
      style: {top:'0', display: 'none'},
      class: "p-datatable-scrollable-body-table p-datatable-loading-virtual-table p-datatable-virtual-table"
    };
    const _hoisted_4 = {
      class: "p-datatable-virtual-scroller",
      ref: "virtualScroller"
    };
    const _hoisted_5 = {
      class: "p-datatable-scrollable-footer",
      ref: "scrollFooter"
    };
    const _hoisted_6 = {
      class: "p-datatable-scrollable-footer-box",
      ref: "scrollFooterBox"
    };
    const _hoisted_7 = { class: "p-datatable-scrollable-footer-table" };

    function render$1(_ctx, _cache, $props, $setup, $data, $options) {
      const _component_DTTableLoadingBody = vue.resolveComponent("DTTableLoadingBody");

      return (vue.openBlock(), vue.createBlock("div", {
        class: $options.containerClass,
        style: $options.containerStyle
      }, [
        vue.createVNode("div", {
          class: "p-datatable-scrollable-header",
          ref: "scrollHeader",
          onScroll: _cache[1] || (_cache[1] = (...args) => ($options.onHeaderScroll && $options.onHeaderScroll(...args)))
        }, [
          vue.createVNode("div", _hoisted_1$1, [
            vue.createVNode("table", _hoisted_2, [
              vue.createVNode("colgroup", null, [
                (vue.openBlock(true), vue.createBlock(vue.Fragment, null, vue.renderList($props.columns, (col, i) => {
                  return (vue.openBlock(), vue.createBlock(vue.Fragment, null, [
                    ($options.shouldRenderCol(col))
                      ? (vue.openBlock(), vue.createBlock("col", {
                          key: $options.columnProp(col,'columnKey')||$options.columnProp(col,'field')||i,
                          style: $options.columnProp(col,'headerStyle'),
                          class: $options.columnProp(col,'headerClass')
                        }, null, 6))
                      : vue.createCommentVNode("", true)
                  ], 64))
                }), 256))
              ]),
              vue.renderSlot(_ctx.$slots, "header", {
                columns: $props.columns,
                columnGroup: $props.headerColumnGroup
              }),
              vue.renderSlot(_ctx.$slots, "frozenbody", { columns: $props.columns })
            ])
          ], 512)
        ], 544),
        vue.createVNode("div", {
          class: "p-datatable-scrollable-body",
          ref: "scrollBody",
          onScroll: _cache[2] || (_cache[2] = (...args) => ($options.onBodyScroll && $options.onBodyScroll(...args))),
          style: $options.bodyStyle
        }, [
          vue.createVNode("table", {
            ref: "scrollTable",
            class: $options.bodyTableClass,
            style: $options.bodyTableStyle
          }, [
            vue.createVNode("colgroup", null, [
              (vue.openBlock(true), vue.createBlock(vue.Fragment, null, vue.renderList($props.columns, (col, i) => {
                return (vue.openBlock(), vue.createBlock(vue.Fragment, null, [
                  ($options.shouldRenderCol(col))
                    ? (vue.openBlock(), vue.createBlock("col", {
                        key: $options.columnProp(col,'columnKey')||$options.columnProp(col,'field')||i,
                        style: $options.columnProp(col,'bodyStyle'),
                        class: $options.columnProp(col,'bodyClass')
                      }, null, 6))
                    : vue.createCommentVNode("", true)
                ], 64))
              }), 256))
            ]),
            vue.renderSlot(_ctx.$slots, "body", { columns: $props.columns })
          ], 6),
          ($props.virtualScroll)
            ? (vue.openBlock(), vue.createBlock("table", _hoisted_3, [
                vue.createVNode("colgroup", null, [
                  (vue.openBlock(true), vue.createBlock(vue.Fragment, null, vue.renderList($props.columns, (col, i) => {
                    return (vue.openBlock(), vue.createBlock("col", {
                      key: $options.columnProp(col,'columnKey')||$options.columnProp(col,'field')||i,
                      style: $options.columnProp(col,'bodyStyle'),
                      class: $options.columnProp(col,'bodyClass')
                    }, null, 6))
                  }), 128))
                ]),
                vue.createVNode(_component_DTTableLoadingBody, {
                  columns: $props.columns,
                  rows: $props.rows
                }, null, 8, ["columns", "rows"])
              ], 512))
            : vue.createCommentVNode("", true),
          vue.createVNode("div", _hoisted_4, null, 512)
        ], 36),
        vue.createVNode("div", _hoisted_5, [
          vue.createVNode("div", _hoisted_6, [
            vue.createVNode("table", _hoisted_7, [
              vue.createVNode("colgroup", null, [
                (vue.openBlock(true), vue.createBlock(vue.Fragment, null, vue.renderList($props.columns, (col, i) => {
                  return (vue.openBlock(), vue.createBlock(vue.Fragment, null, [
                    ($options.shouldRenderCol(col))
                      ? (vue.openBlock(), vue.createBlock("col", {
                          key: $options.columnProp(col,'columnKey')||$options.columnProp(col,'field')||i,
                          style: $options.columnProp(col,'footerStyle'),
                          class: $options.columnProp(col,'footerClass')
                        }, null, 6))
                      : vue.createCommentVNode("", true)
                  ], 64))
                }), 256))
              ]),
              vue.renderSlot(_ctx.$slots, "footer", {
                columns: $props.columns,
                columnGroup: $props.footerColumnGroup
              })
            ])
          ], 512)
        ], 512)
      ], 6))
    }

    script$1.render = render$1;

    var script$2 = {
        inheritAttrs: false,
        emits: ['change'],
        props: {
            checked: null
        },
        data() {
            return {
                focused: false
            };
        },
        methods: {
            onClick(event) {
                if (!this.$attrs.disabled) {
                    this.focused = true;
                    this.$emit('change', event);
                }
            },
            onFocus() {
                this.focused = true;
            },
            onBlur() {
                this.focused = false;
            }
        }
    };

    function render$2(_ctx, _cache, $props, $setup, $data, $options) {
      return (vue.openBlock(), vue.createBlock("div", {
        class: "p-checkbox p-component",
        onClick: _cache[3] || (_cache[3] = (...args) => ($options.onClick && $options.onClick(...args))),
        onKeydown: _cache[4] || (_cache[4] = vue.withKeys(vue.withModifiers((...args) => ($options.onClick && $options.onClick(...args)), ["prevent"]), ["space"]))
      }, [
        vue.createVNode("div", {
          ref: "box",
          class: ['p-checkbox-box p-component', {'p-highlight': $props.checked, 'p-disabled': _ctx.$attrs.disabled, 'p-focus': $data.focused}],
          role: "checkbox",
          "aria-checked": $props.checked,
          tabindex: _ctx.$attrs.disabled ? null : '0',
          onFocus: _cache[1] || (_cache[1] = $event => ($options.onFocus($event))),
          onBlur: _cache[2] || (_cache[2] = $event => ($options.onBlur($event)))
        }, [
          vue.createVNode("span", {
            class: ['p-checkbox-icon', {'pi pi-check': $props.checked}]
          }, null, 2)
        ], 42, ["aria-checked", "tabindex"])
      ], 32))
    }

    script$2.render = render$2;

    var script$3 = {
        emits: ['column-click', 'column-mousedown', 'column-dragstart', 'column-dragover', 'column-dragleave', 'column-drop',
                'column-resizestart', 'checkbox-change', 'column-click'],
        props: {
    		columnGroup: {
                type: null,
                default: null
            },
            columns: {
                type: null,
                default: null
            },
            rowGroupMode: {
                type: String,
                default: null
            },
            groupRowsBy: {
                type: [Array,String],
                default: null
            },
            resizableColumns: {
                type: Boolean,
                default: false
            },
            allRowsSelected: {
                type: Boolean,
                default: false
            },
            empty: {
                type: Boolean,
                default: false
            },
            sortMode: {
                type: String,
                default: 'single'
            },
            sortField: {
                type: [String, Function],
                default: null
            },
            sortOrder: {
                type: Number,
                default: null
            },
            multiSortMeta: {
                type: Array,
                default: null
            }
        },
        methods: {
            columnProp(col, prop) {
                return col.props ? ((col.type.props[prop].type === Boolean && col.props[prop] === '') ? true : col.props[prop]) : null;
            },
            isMultiSorted(column) {
                return this.columnProp(column, 'sortable') && this.getMultiSortMetaIndex(column) > -1
            },
            isColumnSorted(column) {
                return this.sortMode === 'single' ? (this.sortField && (this.sortField === this.columnProp(column, 'field') || this.sortField === this.columnProp(column, 'sortField'))) : this.isMultiSorted(column);
            },
            getColumnHeaderClass(column) {
                return [this.columnProp(column, 'headerClass'),
                        {'p-sortable-column': this.columnProp(column, 'sortable')},
                        {'p-resizable-column': this.resizableColumns},
                        {'p-highlight': this.isColumnSorted(column)}
                ];
            },
            getFilterColumnHeaderClass(column) {
                return ['p-filter-column', this.columnProp(column, 'filterHeaderClass')];
            },
            getSortableColumnIcon(column) {
                let sorted = false;
                let sortOrder = null;

                if (this.sortMode === 'single') {
                    sorted = this.sortField && (this.sortField === this.columnProp(column, 'field') || this.sortField === this.columnProp(column, 'sortField'));
                    sortOrder = sorted ? this.sortOrder: 0;
                }
                else if (this.sortMode === 'multiple') {
                    let metaIndex = this.getMultiSortMetaIndex(column);
                    if (metaIndex > -1) {
                        sorted = true;
                        sortOrder = this.multiSortMeta[metaIndex].order;
                    }
                }

                return [
                    'p-sortable-column-icon pi pi-fw', {
                        'pi-sort-alt': !sorted,
                        'pi-sort-amount-up-alt': sorted && sortOrder > 0,
                        'pi-sort-amount-down': sorted && sortOrder < 0
                    }
                ];
            },
            getMultiSortMetaIndex(column) {
                let index = -1;

                for (let i = 0; i < this.multiSortMeta.length; i++) {
                    let meta = this.multiSortMeta[i];
                    if (meta.field === this.columnProp(column, 'field') || meta.field === this.columnProp(column, 'sortField')) {
                        index = i;
                        break;
                    }
                }

                return index;
            },
            onColumnHeaderClick(event, col) {
                this.$emit('column-click', {originalEvent: event, column: col});
            },
            onColumnHeaderMouseDown(event, col) {
                this.$emit('column-mousedown', {originalEvent: event, column: col});
            },
            onColumnHeaderDragStart(event) {
                this.$emit('column-dragstart', event);
            },
            onColumnHeaderDragOver(event) {
                this.$emit('column-dragover', event);
            },
            onColumnHeaderDragLeave(event) {
                this.$emit('column-dragleave', event);
            },
            onColumnHeaderDrop(event) {
                this.$emit('column-drop', event);
            },
            onColumnResizeStart(event) {
                this.$emit('column-resizestart', event);
            },
            onHeaderCheckboxChange(event) {
                this.$emit('checkbox-change', event);
            },
            onColumnKeyDown(event, col) {
                if (event.which === 13 && event.currentTarget.nodeName === 'TH' && utils.DomHandler.hasClass(event.currentTarget, 'p-sortable-column')) {
                    this.$emit('column-click', {originalEvent: event, column: col});
                }
            },
            getAriaSort(column) {
                if (this.columnProp(column, 'sortable')) {
                    const sortIcon = this.getSortableColumnIcon(column);
                    if (sortIcon[1]['pi-sort-amount-down'])
                        return 'descending';
                    else if (sortIcon[1]['pi-sort-amount-up-alt'])
                        return 'ascending';
                    else
                        return 'none';
                }
                else {
                    return null;
                }
            },
            hasColumnFilter() {
                if (this.columns) {
                    for (let col of this.columns) {
                        if (col.children && col.children.filter) {
                            return true;
                        }
                    }
                }

                return false;
            }
        },
        components: {
            'DTHeaderCheckbox': script$2
        }
    };

    const _hoisted_1$2 = { class: "p-datatable-thead" };
    const _hoisted_2$1 = {
      key: 2,
      class: "p-column-title"
    };
    const _hoisted_3$1 = {
      key: 4,
      class: "p-sortable-column-badge"
    };
    const _hoisted_4$1 = { key: 0 };
    const _hoisted_5$1 = {
      key: 1,
      class: "p-column-title"
    };
    const _hoisted_6$1 = {
      key: 3,
      class: "p-sortable-column-badge"
    };

    function render$3(_ctx, _cache, $props, $setup, $data, $options) {
      const _component_DTHeaderCheckbox = vue.resolveComponent("DTHeaderCheckbox");

      return (vue.openBlock(), vue.createBlock("thead", _hoisted_1$2, [
        (!$props.columnGroup)
          ? (vue.openBlock(), vue.createBlock(vue.Fragment, { key: 0 }, [
              vue.createVNode("tr", null, [
                (vue.openBlock(true), vue.createBlock(vue.Fragment, null, vue.renderList($props.columns, (col, i) => {
                  return (vue.openBlock(), vue.createBlock(vue.Fragment, null, [
                    ($props.rowGroupMode !== 'subheader' || ($props.groupRowsBy !== $options.columnProp(col, 'field')))
                      ? (vue.openBlock(), vue.createBlock("th", {
                          tabindex: $options.columnProp(col, 'sortable') ? '0' : null,
                          onKeydown: $event => ($options.onColumnKeyDown($event, col)),
                          key: $options.columnProp(col, 'columnKey')||$options.columnProp(col, 'field')||i,
                          style: $options.columnProp(col, 'headerStyle'),
                          class: $options.getColumnHeaderClass(col),
                          onClick: $event => ($options.onColumnHeaderClick($event, col)),
                          onMousedown: $event => ($options.onColumnHeaderMouseDown($event, col)),
                          onDragstart: _cache[3] || (_cache[3] = $event => ($options.onColumnHeaderDragStart($event))),
                          onDragover: _cache[4] || (_cache[4] = $event => ($options.onColumnHeaderDragOver($event))),
                          onDragleave: _cache[5] || (_cache[5] = $event => ($options.onColumnHeaderDragLeave($event))),
                          onDrop: _cache[6] || (_cache[6] = $event => ($options.onColumnHeaderDrop($event))),
                          colspan: $options.columnProp(col, 'colspan'),
                          rowspan: $options.columnProp(col, 'rowspan'),
                          "aria-sort": $options.getAriaSort(col)
                        }, [
                          ($props.resizableColumns)
                            ? (vue.openBlock(), vue.createBlock("span", {
                                key: 0,
                                class: "p-column-resizer",
                                onMousedown: _cache[1] || (_cache[1] = $event => ($options.onColumnResizeStart($event)))
                              }, null, 32))
                            : vue.createCommentVNode("", true),
                          (col.children && col.children.header)
                            ? (vue.openBlock(), vue.createBlock(vue.resolveDynamicComponent(col.children.header), {
                                key: 1,
                                column: col
                              }, null, 8, ["column"]))
                            : vue.createCommentVNode("", true),
                          ($options.columnProp(col, 'header'))
                            ? (vue.openBlock(), vue.createBlock("span", _hoisted_2$1, vue.toDisplayString($options.columnProp(col, 'header')), 1))
                            : vue.createCommentVNode("", true),
                          ($options.columnProp(col, 'sortable'))
                            ? (vue.openBlock(), vue.createBlock("span", {
                                key: 3,
                                class: $options.getSortableColumnIcon(col)
                              }, null, 2))
                            : vue.createCommentVNode("", true),
                          ($options.isMultiSorted(col))
                            ? (vue.openBlock(), vue.createBlock("span", _hoisted_3$1, vue.toDisplayString($options.getMultiSortMetaIndex(col) + 1), 1))
                            : vue.createCommentVNode("", true),
                          ($options.columnProp(col, 'selectionMode') ==='multiple' && !$options.hasColumnFilter())
                            ? (vue.openBlock(), vue.createBlock(_component_DTHeaderCheckbox, {
                                key: 5,
                                checked: $props.allRowsSelected,
                                onChange: _cache[2] || (_cache[2] = $event => ($options.onHeaderCheckboxChange($event))),
                                disabled: $props.empty
                              }, null, 8, ["checked", "disabled"]))
                            : vue.createCommentVNode("", true)
                        ], 46, ["tabindex", "onKeydown", "onClick", "onMousedown", "colspan", "rowspan", "aria-sort"]))
                      : vue.createCommentVNode("", true)
                  ], 64))
                }), 256))
              ]),
              ($options.hasColumnFilter())
                ? (vue.openBlock(), vue.createBlock("tr", _hoisted_4$1, [
                    (vue.openBlock(true), vue.createBlock(vue.Fragment, null, vue.renderList($props.columns, (col, i) => {
                      return (vue.openBlock(), vue.createBlock(vue.Fragment, null, [
                        ($props.rowGroupMode !== 'subheader' || ($props.groupRowsBy !== $options.columnProp(col, 'field')))
                          ? (vue.openBlock(), vue.createBlock("th", {
                              key: $options.columnProp(col, 'columnKey')||$options.columnProp(col, 'field')||i,
                              class: $options.getFilterColumnHeaderClass(col),
                              style: $options.columnProp(col, 'filterHeaderStyle')
                            }, [
                              (col.children && col.children.filter)
                                ? (vue.openBlock(), vue.createBlock(vue.resolveDynamicComponent(col.children.filter), {
                                    key: 0,
                                    column: col
                                  }, null, 8, ["column"]))
                                : vue.createCommentVNode("", true),
                              ($options.columnProp(col, 'selectionMode')==='multiple')
                                ? (vue.openBlock(), vue.createBlock(_component_DTHeaderCheckbox, {
                                    key: 1,
                                    checked: $props.allRowsSelected,
                                    onChange: _cache[7] || (_cache[7] = $event => ($options.onHeaderCheckboxChange($event))),
                                    disabled: $props.empty
                                  }, null, 8, ["checked", "disabled"]))
                                : vue.createCommentVNode("", true)
                            ], 6))
                          : vue.createCommentVNode("", true)
                      ], 64))
                    }), 256))
                  ]))
                : vue.createCommentVNode("", true)
            ], 64))
          : (vue.openBlock(true), vue.createBlock(vue.Fragment, { key: 1 }, vue.renderList($props.columnGroup.children.default(), (row, i) => {
              return (vue.openBlock(), vue.createBlock("tr", { key: i }, [
                (vue.openBlock(true), vue.createBlock(vue.Fragment, null, vue.renderList(row.children.default(), (col, i) => {
                  return (vue.openBlock(), vue.createBlock("th", {
                    key: $options.columnProp(col, 'columnKey')||$options.columnProp(col, 'field')||i,
                    style: $options.columnProp(col, 'headerStyle'),
                    class: $options.getColumnHeaderClass(col),
                    tabindex: $options.columnProp(col, 'sortable') ? '0' : null,
                    onClick: $event => ($options.onColumnHeaderClick($event, col)),
                    onKeydown: $event => ($options.onColumnKeyDown($event, col)),
                    onDragstart: _cache[9] || (_cache[9] = $event => ($options.onColumnHeaderDragStart($event))),
                    onDragover: _cache[10] || (_cache[10] = $event => ($options.onColumnHeaderDragOver($event))),
                    onDragleave: _cache[11] || (_cache[11] = $event => ($options.onColumnHeaderDragLeave($event))),
                    onDrop: _cache[12] || (_cache[12] = $event => ($options.onColumnHeaderDrop($event))),
                    colspan: $options.columnProp(col, 'colspan'),
                    rowspan: $options.columnProp(col, 'rowspan'),
                    "aria-sort": $options.getAriaSort(col)
                  }, [
                    (col.children && col.children.header)
                      ? (vue.openBlock(), vue.createBlock(vue.resolveDynamicComponent(col.children.header), {
                          key: 0,
                          column: col
                        }, null, 8, ["column"]))
                      : vue.createCommentVNode("", true),
                    ($options.columnProp(col, 'header'))
                      ? (vue.openBlock(), vue.createBlock("span", _hoisted_5$1, vue.toDisplayString($options.columnProp(col, 'header')), 1))
                      : vue.createCommentVNode("", true),
                    ($options.columnProp(col, 'sortable'))
                      ? (vue.openBlock(), vue.createBlock("span", {
                          key: 2,
                          class: $options.getSortableColumnIcon(col)
                        }, null, 2))
                      : vue.createCommentVNode("", true),
                    ($options.isMultiSorted(col))
                      ? (vue.openBlock(), vue.createBlock("span", _hoisted_6$1, vue.toDisplayString($options.getMultiSortMetaIndex(col) + 1), 1))
                      : vue.createCommentVNode("", true),
                    (col.children && col.children.filter)
                      ? (vue.openBlock(), vue.createBlock(vue.resolveDynamicComponent(col.children.filter), {
                          key: 4,
                          column: col
                        }, null, 8, ["column"]))
                      : vue.createCommentVNode("", true),
                    ($options.columnProp(col, 'selectionMode') ==='multiple')
                      ? (vue.openBlock(), vue.createBlock(_component_DTHeaderCheckbox, {
                          key: 5,
                          checked: $props.allRowsSelected,
                          onChange: _cache[8] || (_cache[8] = $event => ($options.onHeaderCheckboxChange($event))),
                          disabled: $props.empty
                        }, null, 8, ["checked", "disabled"]))
                      : vue.createCommentVNode("", true)
                  ], 46, ["tabindex", "onClick", "onKeydown", "colspan", "rowspan", "aria-sort"]))
                }), 128))
              ]))
            }), 128))
      ]))
    }

    script$3.render = render$3;

    var script$4 = {
        inheritAttrs: false,
        emits: ['change'],
        props: {
    		value: null,
            checked: null
        },
        data() {
            return {
                focused: false
            };
        },
        methods: {
            onClick(event) {
                if (!this.disabled) {
                    if (!this.checked) {
                        this.$emit('change', {
                            originalEvent: event,
                            data: this.value
                        });
                    }
                }
            },
            onFocus() {
                this.focused = true;
            },
            onBlur() {
                this.focused = false;
            }
        }
    };

    const _hoisted_1$3 = /*#__PURE__*/vue.createVNode("div", { class: "p-radiobutton-icon" }, null, -1);

    function render$4(_ctx, _cache, $props, $setup, $data, $options) {
      return (vue.openBlock(), vue.createBlock("div", {
        class: "p-radiobutton p-component",
        onClick: _cache[1] || (_cache[1] = (...args) => ($options.onClick && $options.onClick(...args))),
        tabindex: "0",
        onFocus: _cache[2] || (_cache[2] = $event => ($options.onFocus($event))),
        onBlur: _cache[3] || (_cache[3] = $event => ($options.onBlur($event)))
      }, [
        vue.createVNode("div", {
          ref: "box",
          class: ['p-radiobutton-box p-component', {'p-highlight': $props.checked, 'p-disabled': _ctx.$attrs.disabled, 'p-focus': $data.focused}],
          role: "radio",
          "aria-checked": $props.checked
        }, [
          _hoisted_1$3
        ], 10, ["aria-checked"])
      ], 32))
    }

    script$4.render = render$4;

    var script$5 = {
        inheritAttrs: false,
        emits: ['change'],
        props: {
    		value: null,
            checked: null
        },
        data() {
            return {
                focused: false
            };
        },
        methods: {
            onClick(event) {
                if (!this.$attrs.disabled) {
                    this.focused = true;
                    this.$emit('change', {
                        originalEvent: event,
                        data: this.value
                    });
                }
            },
            onFocus() {
                this.focused = true;
            },
            onBlur() {
                this.focused = false;
            }
        }
    };

    function render$5(_ctx, _cache, $props, $setup, $data, $options) {
      return (vue.openBlock(), vue.createBlock("div", {
        class: "p-checkbox p-component",
        onClick: _cache[3] || (_cache[3] = (...args) => ($options.onClick && $options.onClick(...args))),
        onKeydown: _cache[4] || (_cache[4] = vue.withKeys(vue.withModifiers((...args) => ($options.onClick && $options.onClick(...args)), ["prevent"]), ["space"]))
      }, [
        vue.createVNode("div", {
          ref: "box",
          class: ['p-checkbox-box p-component', {'p-highlight': $props.checked, 'p-disabled': _ctx.$attrs.disabled, 'p-focus': $data.focused}],
          role: "checkbox",
          "aria-checked": $props.checked,
          tabindex: _ctx.$attrs.disabled ? null : '0',
          onFocus: _cache[1] || (_cache[1] = $event => ($options.onFocus($event))),
          onBlur: _cache[2] || (_cache[2] = $event => ($options.onBlur($event)))
        }, [
          vue.createVNode("span", {
            class: ['p-checkbox-icon', {'pi pi-check': $props.checked}]
          }, null, 2)
        ], 42, ["aria-checked", "tabindex"])
      ], 32))
    }

    script$5.render = render$5;

    var script$6 = {
        emits: ['cell-edit-init', 'cell-edit-complete', 'cell-edit-cancel', 'row-edit-init', 'row-edit-save', 'row-edit-cancel',
                'row-toggle', 'radio-change', 'checkbox-change'],
        props: {
            rowData: {
                type: Object,
                default: null
            },
            column: {
                type: Object,
                default: null
            },
            index: {
                type: Number,
                default: null
            },
            rowTogglerIcon: {
                type: Array,
                default: null
            },
            selected: {
                type: Boolean,
                default: false
            },
            editing: {
                type: Boolean,
                default: false
            },
            editMode: {
                type: String,
                default: null
            }
        },
        documentEditListener: null,
        selfClick: false,
        data() {
            return {
                d_editing: this.editing
            }
        },
        watch: {
            editing(newValue) {
                this.d_editing = newValue;
            }
        },
        mounted() {
            this.children = this.$children;
        },
        updated() {
            let query = this.editMode === 'row' ? '[autofocus]' : 'input';
            let focusable = utils.DomHandler.findSingle(this.$el, query);
            if (focusable && document.activeElement != focusable) {
                focusable.focus();
            }
        },
        methods: {
            columnProp(prop) {
                return this.column.props ? ((this.column.type.props[prop].type === Boolean && this.column.props[prop] === '') ? true : this.column.props[prop]) : null;
            },
            resolveFieldData() {
                return utils.ObjectUtils.resolveFieldData(this.rowData, this.columnProp('field'));
            },
            toggleRow(event) {
                this.$emit('row-toggle', {
                    originalEvent: event,
                    data: this.rowData
                });
            },
            toggleRowWithRadio(event) {
                this.$emit('radio-change', event);
            },
            toggleRowWithCheckbox(event) {
                this.$emit('checkbox-change', event);
            },
            isEditable() {
                return this.column.children && this.column.children.editor != null;
            },
            bindDocumentEditListener() {
                if (!this.documentEditListener) {
                    this.documentEditListener = (event) => {
                        if (this.isOutsideClicked()) {
                            this.completeEdit(event, 'outside');
                        }
                        this.selfClick = false;
                    };

                    document.addEventListener('click', this.documentEditListener);
                }
            },
            unbindDocumentEditListener() {
                if (this.documentEditListener) {
                    document.removeEventListener('click', this.documentEditListener);
                    this.documentEditListener = null;
                    this.selfClick = false;
                }
            },
            switchCellToViewMode() {
                this.d_editing = false;
                this.unbindDocumentEditListener();
            },
            isOutsideClicked() {
                return !this.selfClick;
            },
            onClick(event) {
                if (this.editMode === 'cell' && this.isEditable()) {
                    this.selfClick = true;

                    if (!this.d_editing) {
                        this.d_editing = true;
                        this.bindDocumentEditListener();
                        this.$emit('cell-edit-init', {originalEvent: event, data: this.rowData, field: this.columnProp('field'), index: this.index});
                    }
                }
            },
            completeEdit(event, type) {
                let completeEvent = {
                    originalEvent: event,
                    data: this.rowData,
                    field: this.columnProp('field'),
                    index: this.index,
                    type: type,
                    defaultPrevented: false,
                    preventDefault: function() {
                        this.defaultPrevented = true;
                    }
                };

                this.$emit('cell-edit-complete', completeEvent);

                if (!completeEvent.defaultPrevented) {
                    this.switchCellToViewMode();
                }
            },
            onKeyDown(event) {
                if (this.editMode === 'cell') {
                    switch (event.which) {
                        case 13:
                            this.completeEdit(event, 'enter');
                        break;

                        case 27:
                            this.switchCellToViewMode();
                            this.$emit('cell-edit-cancel', {originalEvent: event, data: this.rowData, field: this.columnProp('field'), index: this.index});
                        break;

                        case 9:
                            this.completeEdit(event, 'tab');

                            if (event.shiftKey)
                                this.moveToPreviousCell(event);
                            else
                                this.moveToNextCell(event);
                        break;
                    }
                }
            },
            moveToPreviousCell(event) {
                let currentCell = this.findCell(event.target);
                let targetCell = this.findPreviousEditableColumn(currentCell);

                if (targetCell) {
                    utils.DomHandler.invokeElementMethod(targetCell, 'click');
                    event.preventDefault();
                }
            },
            moveToNextCell(event) {
                let currentCell = this.findCell(event.target);
                let targetCell = this.findNextEditableColumn(currentCell);

                if (targetCell) {
                    utils.DomHandler.invokeElementMethod(targetCell, 'click');
                    event.preventDefault();
                }
            },
            findCell(element) {
                if (element) {
                    let cell = element;
                    while (cell && !utils.DomHandler.hasClass(cell, 'p-cell-editing')) {
                        cell = cell.parentElement;
                    }

                    return cell;
                }
                else {
                    return null;
                }
            },
            findPreviousEditableColumn(cell) {
                let prevCell = cell.previousElementSibling;

                if (!prevCell) {
                    let previousRow = cell.parentElement.previousElementSibling;
                    if (previousRow) {
                        prevCell = previousRow.lastElementChild;
                    }
                }

                if (prevCell) {
                    if (utils.DomHandler.hasClass(prevCell, 'p-editable-column'))
                        return prevCell;
                    else
                        return this.findPreviousEditableColumn(prevCell);
                }
                else {
                    return null;
                }
            },
            findNextEditableColumn(cell) {
                let nextCell = cell.nextElementSibling;

                if (!nextCell) {
                    let nextRow = cell.parentElement.nextElementSibling;
                    if (nextRow) {
                        nextCell = nextRow.firstElementChild;
                    }
                }

                if (nextCell) {
                    if (utils.DomHandler.hasClass(nextCell, 'p-editable-column'))
                        return nextCell;
                    else
                        return this.findNextEditableColumn(nextCell);
                }
                else {
                    return null;
                }
            },
            isEditingCellValid() {
                return (utils.DomHandler.find(this.$el, '.p-invalid').length === 0);
            },
            onRowEditInit(event) {
                this.$emit('row-edit-init', {originalEvent: event, data: this.rowData, field: this.columnProp('field'), index: this.index});
            },
            onRowEditSave(event) {
                this.$emit('row-edit-save', {originalEvent: event, data: this.rowData, field: this.columnProp('field'), index: this.index});
            },
            onRowEditCancel(event) {
                this.$emit('row-edit-cancel', {originalEvent: event, data: this.rowData, field: this.columnProp('field'), index: this.index});
            }
        },
        computed: {
            containerClass() {
                return [this.columnProp('bodyClass'), {
                    'p-selection-column': this.columnProp('selectionMode') != null,
                    'p-editable-column': this.isEditable(),
                    'p-cell-editing': this.d_editing
                }];
            }
        },
        components: {
            'DTRadioButton': script$4,
            'DTCheckbox': script$5
        },
        directives: {
            'ripple': Ripple__default['default']
        }
    };

    const _hoisted_1$4 = /*#__PURE__*/vue.createVNode("span", { class: "p-row-editor-init-icon pi pi-fw pi-pencil" }, null, -1);
    const _hoisted_2$2 = /*#__PURE__*/vue.createVNode("span", { class: "p-row-editor-save-icon pi pi-fw pi-check" }, null, -1);
    const _hoisted_3$2 = /*#__PURE__*/vue.createVNode("span", { class: "p-row-editor-cancel-icon pi pi-fw pi-times" }, null, -1);

    function render$6(_ctx, _cache, $props, $setup, $data, $options) {
      const _component_DTRadioButton = vue.resolveComponent("DTRadioButton");
      const _component_DTCheckbox = vue.resolveComponent("DTCheckbox");
      const _directive_ripple = vue.resolveDirective("ripple");

      return (vue.openBlock(), vue.createBlock("td", {
        style: $options.columnProp('bodyStyle'),
        class: $options.containerClass,
        onClick: _cache[5] || (_cache[5] = (...args) => ($options.onClick && $options.onClick(...args))),
        onKeydown: _cache[6] || (_cache[6] = (...args) => ($options.onKeyDown && $options.onKeyDown(...args)))
      }, [
        ($props.column.children && $props.column.children.body && !$data.d_editing)
          ? (vue.openBlock(), vue.createBlock(vue.resolveDynamicComponent($props.column.children.body), {
              key: 0,
              data: $props.rowData,
              column: $props.column,
              index: $props.index
            }, null, 8, ["data", "column", "index"]))
          : ($props.column.children && $props.column.children.editor && $data.d_editing)
            ? (vue.openBlock(), vue.createBlock(vue.resolveDynamicComponent($props.column.children.editor), {
                key: 1,
                data: $props.rowData,
                column: $props.column,
                index: $props.index
              }, null, 8, ["data", "column", "index"]))
            : ($options.columnProp('selectionMode'))
              ? (vue.openBlock(), vue.createBlock(vue.Fragment, { key: 2 }, [
                  ($props.column.props.selectionMode === 'single')
                    ? (vue.openBlock(), vue.createBlock(_component_DTRadioButton, {
                        key: 0,
                        value: $props.rowData,
                        checked: $props.selected,
                        onChange: $options.toggleRowWithRadio
                      }, null, 8, ["value", "checked", "onChange"]))
                    : ($props.column.props.selectionMode ==='multiple')
                      ? (vue.openBlock(), vue.createBlock(_component_DTCheckbox, {
                          key: 1,
                          value: $props.rowData,
                          checked: $props.selected,
                          onChange: $options.toggleRowWithCheckbox
                        }, null, 8, ["value", "checked", "onChange"]))
                      : vue.createCommentVNode("", true)
                ], 64))
              : ($options.columnProp('rowReorder'))
                ? (vue.openBlock(), vue.createBlock("i", {
                    key: 3,
                    class: ['p-datatable-reorderablerow-handle', ($options.columnProp('rowReorderIcon') || 'pi pi-bars')]
                  }, null, 2))
                : ($options.columnProp('expander'))
                  ? vue.withDirectives((vue.openBlock(), vue.createBlock("button", {
                      key: 4,
                      class: "p-row-toggler p-link",
                      onClick: _cache[1] || (_cache[1] = (...args) => ($options.toggleRow && $options.toggleRow(...args))),
                      type: "button"
                    }, [
                      vue.createVNode("span", { class: $props.rowTogglerIcon }, null, 2)
                    ], 512)), [
                      [_directive_ripple]
                    ])
                  : ($props.editMode === 'row' && $options.columnProp('rowEditor'))
                    ? (vue.openBlock(), vue.createBlock(vue.Fragment, { key: 5 }, [
                        (!$data.d_editing)
                          ? vue.withDirectives((vue.openBlock(), vue.createBlock("button", {
                              key: 0,
                              class: "p-row-editor-init p-link",
                              onClick: _cache[2] || (_cache[2] = (...args) => ($options.onRowEditInit && $options.onRowEditInit(...args))),
                              type: "button"
                            }, [
                              _hoisted_1$4
                            ], 512)), [
                              [_directive_ripple]
                            ])
                          : vue.createCommentVNode("", true),
                        ($data.d_editing)
                          ? vue.withDirectives((vue.openBlock(), vue.createBlock("button", {
                              key: 1,
                              class: "p-row-editor-save p-link",
                              onClick: _cache[3] || (_cache[3] = (...args) => ($options.onRowEditSave && $options.onRowEditSave(...args))),
                              type: "button"
                            }, [
                              _hoisted_2$2
                            ], 512)), [
                              [_directive_ripple]
                            ])
                          : vue.createCommentVNode("", true),
                        ($data.d_editing)
                          ? vue.withDirectives((vue.openBlock(), vue.createBlock("button", {
                              key: 2,
                              class: "p-row-editor-cancel p-link",
                              onClick: _cache[4] || (_cache[4] = (...args) => ($options.onRowEditCancel && $options.onRowEditCancel(...args))),
                              type: "button"
                            }, [
                              _hoisted_3$2
                            ], 512)), [
                              [_directive_ripple]
                            ])
                          : vue.createCommentVNode("", true)
                      ], 64))
                    : (vue.openBlock(), vue.createBlock(vue.Fragment, { key: 6 }, [
                        vue.createTextVNode(vue.toDisplayString($options.resolveFieldData()), 1)
                      ], 64))
      ], 38))
    }

    script$6.render = render$6;

    var script$7 = {
        emits: ['rowgroup-toggle', 'row-click', 'row-rightclick', 'row-touchend', 'row-keydown', 'row-mousedown', 
            'row-dragstart', 'row-dragover', 'row-dragleave', 'row-dragend', 'row-drop', 'row-toggle',
            'radio-change', 'checkbox-change', 'cell-edit-init', 'cell-edit-complete', 'cell-edit-cancel', 
            'row-edit-init', 'row-edit-save', 'row-edit-cancel'],
        props: {
            value: {
                type: Array,
                default: null
            },
            columns: {
                type: null,
                default: null
            },
            empty: {
                type: Boolean,
                default: false
            },
            rowGroupMode: {
                type: String,
                default: null
            },
            groupRowsBy: {
                type: [Array,String],
                default: null
            },
            expandableRowGroups: {
                type: Boolean,
                default: false
            },
            expandedRowGroups: {
                type: Array,
                default: null
            },
            dataKey: {
                type: String,
                default: null
            },
            expandedRowIcon: {
                type: String,
                default: null
            },
            collapsedRowIcon: {
                type: String,
                default: null
            },
            expandedRows: {
                type: Array,
                default: null
            },
            expandedRowKeys: {
                type: null,
                default: null
            },
            selection: {
                type: [Array,Object],
                default: null
            },
            selectionKeys: {
                type: null,
                default: null
            },
            selectionMode: {
                type: String,
                default: null
            },
            contextMenu: {
                type: Boolean,
                default: false
            },
            contextMenuSelection: {
                type: Object,
                default: null
            },
            rowClass: {
                type: null,
                default: null
            },
            editMode: {
                type: String,
                default: null
            },
            compareSelectionBy: {
                type: String,
                default: 'deepEquals'
            },
            editingRows: {
                type: Array,
                default: null
            },
            editingRowKeys: {
                type: null,
                default: null
            },
            loading: {
                type: Boolean,
                default: false
            },
            templates: {
                type: null,
                default: null
            }
        },
        methods: {
            columnProp(col, prop) {
                return col.props ? ((col.type.props[prop].type === Boolean && col.props[prop] === '') ? true : col.props[prop]) : null;
            },
            shouldRenderRowGroupHeader(value, rowData, i) {
                let currentRowFieldData = utils.ObjectUtils.resolveFieldData(rowData, this.groupRowsBy);
                let prevRowData = value[i - 1];
                if (prevRowData) {
                    let previousRowFieldData = utils.ObjectUtils.resolveFieldData(prevRowData, this.groupRowsBy);
                    return currentRowFieldData !== previousRowFieldData;
                }
                else {
                    return true;
                }
            },
            getRowKey(rowData, index) {
                return this.dataKey ? utils.ObjectUtils.resolveFieldData(rowData, this.dataKey): index;
            },
            getRowClass(rowData) {
                let rowStyleClass = [];
                if (this.selectionMode) {
                     rowStyleClass.push('p-selectable-row');
                }

                if (this.selection) {
                    rowStyleClass.push({
                        'p-highlight': this.isSelected(rowData)
                    });
                }

                if (this.contextMenuSelection) {
                    rowStyleClass.push({
                        'p-highlight-contextmenu': this.isSelectedWithContextMenu(rowData)
                    });
                }

                if (this.rowClass) {
                    let rowClassValue = this.rowClass(rowData);

                    if (rowClassValue) {
                        rowStyleClass.push(rowClassValue);
                    }
                }

                return rowStyleClass;
            },
            shouldRenderRowGroupFooter(value, rowData, i) {
                if (this.expandableRowGroups && !this.isRowGroupExpanded(rowData)) {
                    return false;
                }
                else {
                    let currentRowFieldData = utils.ObjectUtils.resolveFieldData(rowData, this.groupRowsBy);
                    let nextRowData = value[i + 1];
                    if (nextRowData) {
                        let nextRowFieldData = utils.ObjectUtils.resolveFieldData(nextRowData, this.groupRowsBy);
                        return currentRowFieldData !== nextRowFieldData;
                    }
                    else {
                        return true;
                    }
                }
            },
            shouldRenderBodyCell(value, column, i) {
                if (this.rowGroupMode) {
                    if (this.rowGroupMode === 'subheader') {
                        return this.groupRowsBy !== this.columnProp(column, 'field');
                    }
                    else if (this.rowGroupMode === 'rowspan') {
                        if (this.isGrouped(column)) {
                            let prevRowData = value[i - 1];
                            if (prevRowData) {
                                let currentRowFieldData = utils.ObjectUtils.resolveFieldData(value[i], this.columnProp(column, 'field'));
                                let previousRowFieldData = utils.ObjectUtils.resolveFieldData(prevRowData, this.columnProp(column, 'field'));
                                return currentRowFieldData !== previousRowFieldData;
                            }
                            else {
                                return true;
                            }
                        }
                        else {
                            return true;
                        }
                    }
                }
                else {
                    return true;
                }
            },
            calculateRowGroupSize(value, column, index) {
                if (this.isGrouped(column)) {
                    let currentRowFieldData = utils.ObjectUtils.resolveFieldData(value[index], this.columnProp(column, 'field'));
                    let nextRowFieldData = currentRowFieldData;
                    let groupRowSpan = 0;

                    while (currentRowFieldData === nextRowFieldData) {
                        groupRowSpan++;
                        let nextRowData = value[++index];
                        if (nextRowData) {
                            nextRowFieldData = utils.ObjectUtils.resolveFieldData(nextRowData, this.columnProp(column, 'field'));
                        }
                        else {
                            break;
                        }
                    }

                    return groupRowSpan === 1 ? null : groupRowSpan;
                }
                else {
                    return null;
                }
            },
            rowTogglerIcon(rowData) {
                const icon = this.isRowExpanded(rowData) ? this.expandedRowIcon : this.collapsedRowIcon;
                return ['p-row-toggler-icon pi', icon];
            },
            rowGroupTogglerIcon(rowData) {
                const icon = this.isRowGroupExpanded(rowData) ? this.expandedRowIcon : this.collapsedRowIcon;
                return ['p-row-toggler-icon pi', icon];
            },
            isGrouped(column) {
                if (this.groupRowsBy && this.columnProp(column, 'field')) {
                    if (Array.isArray(this.groupRowsBy))
                        return this.groupRowsBy.indexOf(column.props.field) > -1;
                    else
                        return this.groupRowsBy === column.props.field;
                }
                else {
                    return false;
                }
            },
            isRowEditing(rowData) {
                if (rowData && this.editingRows) {
                    if (this.dataKey)
                        return this.editingRowKeys ? this.editingRowKeys[utils.ObjectUtils.resolveFieldData(rowData, this.dataKey)] !== undefined : false;
                    else
                        return this.findIndex(rowData, this.editingRows) > -1;
                }

                return false;
            },
            isRowExpanded(rowData) {
                if (rowData && this.expandedRows) {
                    if (this.dataKey)
                        return this.expandedRowKeys ? this.expandedRowKeys[utils.ObjectUtils.resolveFieldData(rowData, this.dataKey)] !== undefined : false;
                    else
                        return this.findIndex(rowData, this.expandedRows) > -1;
                }

                return false;
            },
            isRowGroupExpanded(rowData) {
                if (this.expandableRowGroups && this.expandedRowGroups) {
                    let groupFieldValue = utils.ObjectUtils.resolveFieldData(rowData, this.groupRowsBy);
                    return this.expandedRowGroups.indexOf(groupFieldValue) > -1;
                }
                return false;
            },
            isSelected(rowData) {
                if (rowData && this.selection) {
                    if (this.dataKey) {
                        return this.selectionKeys ? this.selectionKeys[utils.ObjectUtils.resolveFieldData(rowData, this.dataKey)] !== undefined : false;
                    }
                    else {
                        if (this.selection instanceof Array)
                            return this.findIndexInSelection(rowData) > -1;
                        else
                            return this.equals(rowData, this.selection);
                    }
                }

                return false;
            },
            isSelectedWithContextMenu(rowData) {
                if (rowData && this.contextMenuSelection) {
                    return this.equals(rowData, this.contextMenuSelection, this.dataKey);
                }

                return false;
            },
            findIndexInSelection(rowData) {
                return this.findIndex(rowData, this.selection);
            },
            findIndex(rowData, collection) {
                let index = -1;
                if (collection && collection.length) {
                    for (let i = 0; i < collection.length; i++) {
                        if (this.equals(rowData, collection[i])) {
                            index = i;
                            break;
                        }
                    }
                }

                return index;
            },
            equals(data1, data2) {
                return this.compareSelectionBy === 'equals' ? (data1 === data2) : utils.ObjectUtils.equals(data1, data2, this.dataKey);
            },
            onRowGroupToggle(event, data) {
                this.$emit('rowgroup-toggle', {originalEvent: event, data: data});
            },
            onRowClick(event, rowData, rowIndex) {
                this.$emit('row-click', {originalEvent: event, data: rowData, index: rowIndex});
            },
            onRowRightClick(event, rowData, rowIndex) {
                this.$emit('row-rightclick', {originalEvent: event, data: rowData, index: rowIndex});
            },
            onRowTouchEnd(event) {
                this.$emit('row-touchend', event);
            },
            onRowKeyDown(event, rowData, rowIndex) {
                this.$emit('row-keydown', {originalEvent: event, data: rowData, index: rowIndex});
            },
            onRowMouseDown(event) {
                this.$emit('row-mousedown', event);
            },
            onRowDragStart(event, rowIndex) {
                this.$emit('row-dragstart', {originalEvent: event, index: rowIndex});
            },
            onRowDragOver(event, rowIndex) {
                this.$emit('row-dragover', {originalEvent: event, index: rowIndex});
            },
            onRowDragLeave(event) {
                this.$emit('row-dragleave', event);
            },
            onRowDragEnd(event) {
                this.$emit('row-dragend', event);
            },
            onRowDrop(event) {
                this.$emit('row-drop', event);
            },
            onRowToggle(event) {
                this.$emit('row-toggle', event);
            },
            onRadioChange(event) {
                this.$emit('radio-change', event);
            },
            onCheckboxChange(event) {
                this.$emit('checkbox-change', event);
            },
            onCellEditInit(event) {
                this.$emit('cell-edit-init', event);
            },
            onCellEditComplete(event) {
                this.$emit('cell-edit-complete', event);
            },
            onCellEditCancel(event) {
                this.$emit('cell-edit-cancel', event);
            },
            onRowEditInit(event) {
                this.$emit('row-edit-init', event);
            },
            onRowEditSave(event) {
                this.$emit('row-edit-save', event);
            },
            onRowEditCancel(event) {
                this.$emit('row-edit-cancel', event);
            }
        },
        computed: {
            columnsLength() {
                return this.columns ? this.columns.length : 0;
            }
        },
        components: {
            'DTBodyCell': script$6
        }
    };

    const _hoisted_1$5 = { class: "p-datatable-tbody" };
    const _hoisted_2$3 = {
      key: 1,
      class: "p-datatable-emptymessage"
    };

    function render$7(_ctx, _cache, $props, $setup, $data, $options) {
      const _component_DTBodyCell = vue.resolveComponent("DTBodyCell");

      return (vue.openBlock(), vue.createBlock("tbody", _hoisted_1$5, [
        (!$props.empty)
          ? (vue.openBlock(true), vue.createBlock(vue.Fragment, { key: 0 }, vue.renderList($props.value, (rowData, index) => {
              return (vue.openBlock(), vue.createBlock(vue.Fragment, null, [
                ($props.templates['groupheader'] && $props.rowGroupMode === 'subheader' && $options.shouldRenderRowGroupHeader($props.value, rowData, index))
                  ? (vue.openBlock(), vue.createBlock("tr", {
                      class: "p-rowgroup-header",
                      key: $options.getRowKey(rowData, index) + '_subheader'
                    }, [
                      vue.createVNode("td", {
                        colspan: $options.columnsLength - 1
                      }, [
                        ($props.expandableRowGroups)
                          ? (vue.openBlock(), vue.createBlock("button", {
                              key: 0,
                              class: "p-row-toggler p-link",
                              onClick: $event => ($options.onRowGroupToggle($event, rowData)),
                              type: "button"
                            }, [
                              vue.createVNode("span", {
                                class: $options.rowGroupTogglerIcon(rowData)
                              }, null, 2)
                            ], 8, ["onClick"]))
                          : vue.createCommentVNode("", true),
                        (vue.openBlock(), vue.createBlock(vue.resolveDynamicComponent($props.templates['groupheader']), {
                          data: rowData,
                          index: index
                        }, null, 8, ["data", "index"]))
                      ], 8, ["colspan"])
                    ]))
                  : vue.createCommentVNode("", true),
                ($props.expandableRowGroups ? $options.isRowGroupExpanded(rowData): true)
                  ? (vue.openBlock(), vue.createBlock("tr", {
                      class: $options.getRowClass(rowData),
                      key: $options.getRowKey(rowData, index),
                      onClick: $event => ($options.onRowClick($event, rowData, index)),
                      onContextmenu: $event => ($options.onRowRightClick($event, rowData, index)),
                      onTouchend: _cache[10] || (_cache[10] = $event => ($options.onRowTouchEnd($event))),
                      onKeydown: $event => ($options.onRowKeyDown($event, rowData, index)),
                      tabindex: $props.selectionMode || $props.contextMenu ? '0' : null,
                      onMousedown: _cache[11] || (_cache[11] = $event => ($options.onRowMouseDown($event))),
                      onDragstart: $event => ($options.onRowDragStart($event, index)),
                      onDragover: $event => ($options.onRowDragOver($event,index)),
                      onDragleave: _cache[12] || (_cache[12] = $event => ($options.onRowDragLeave($event))),
                      onDragend: _cache[13] || (_cache[13] = $event => ($options.onRowDragEnd($event))),
                      onDrop: _cache[14] || (_cache[14] = $event => ($options.onRowDrop($event)))
                    }, [
                      (vue.openBlock(true), vue.createBlock(vue.Fragment, null, vue.renderList($props.columns, (col, i) => {
                        return (vue.openBlock(), vue.createBlock(vue.Fragment, null, [
                          ($options.shouldRenderBodyCell($props.value, col, index))
                            ? (vue.openBlock(), vue.createBlock(_component_DTBodyCell, {
                                key: $options.columnProp(col,'columnKey')||$options.columnProp(col,'field')||i,
                                rowData: rowData,
                                column: col,
                                index: index,
                                selected: $options.isSelected(rowData),
                                rowTogglerIcon: $options.columnProp(col,'expander') ? $options.rowTogglerIcon(rowData): null,
                                rowspan: $props.rowGroupMode === 'rowspan' ? $options.calculateRowGroupSize($props.value, col, index) : null,
                                editMode: $props.editMode,
                                editing: $props.editMode === 'row' && $options.isRowEditing(rowData),
                                onRadioChange: _cache[1] || (_cache[1] = $event => ($options.onRadioChange($event))),
                                onCheckboxChange: _cache[2] || (_cache[2] = $event => ($options.onCheckboxChange($event))),
                                onRowToggle: _cache[3] || (_cache[3] = $event => ($options.onRowToggle($event))),
                                onCellEditInit: _cache[4] || (_cache[4] = $event => ($options.onCellEditInit($event))),
                                onCellEditComplete: _cache[5] || (_cache[5] = $event => ($options.onCellEditComplete($event))),
                                onCellEditCancel: _cache[6] || (_cache[6] = $event => ($options.onCellEditCancel($event))),
                                onRowEditInit: _cache[7] || (_cache[7] = $event => ($options.onRowEditInit($event))),
                                onRowEditSave: _cache[8] || (_cache[8] = $event => ($options.onRowEditSave($event))),
                                onRowEditCancel: _cache[9] || (_cache[9] = $event => ($options.onRowEditCancel($event)))
                              }, null, 8, ["rowData", "column", "index", "selected", "rowTogglerIcon", "rowspan", "editMode", "editing"]))
                            : vue.createCommentVNode("", true)
                        ], 64))
                      }), 256))
                    ], 42, ["onClick", "onContextmenu", "onKeydown", "tabindex", "onDragstart", "onDragover"]))
                  : vue.createCommentVNode("", true),
                ($props.templates['expansion'] && $props.expandedRows && $options.isRowExpanded(rowData))
                  ? (vue.openBlock(), vue.createBlock("tr", {
                      class: "p-datatable-row-expansion",
                      key: $options.getRowKey(rowData, index) + '_expansion'
                    }, [
                      vue.createVNode("td", { colspan: $options.columnsLength }, [
                        (vue.openBlock(), vue.createBlock(vue.resolveDynamicComponent($props.templates['expansion']), {
                          data: rowData,
                          index: index
                        }, null, 8, ["data", "index"]))
                      ], 8, ["colspan"])
                    ]))
                  : vue.createCommentVNode("", true),
                ($props.templates['groupfooter'] && $props.rowGroupMode === 'subheader' && $options.shouldRenderRowGroupFooter($props.value, rowData, index))
                  ? (vue.openBlock(), vue.createBlock("tr", {
                      class: "p-rowgroup-footer",
                      key: $options.getRowKey(rowData, index) + '_subfooter'
                    }, [
                      (vue.openBlock(), vue.createBlock(vue.resolveDynamicComponent($props.templates['groupfooter']), {
                        data: rowData,
                        index: index
                      }, null, 8, ["data", "index"]))
                    ]))
                  : vue.createCommentVNode("", true)
              ], 64))
            }), 256))
          : (vue.openBlock(), vue.createBlock("tr", _hoisted_2$3, [
              vue.createVNode("td", { colspan: $options.columnsLength }, [
                ($props.templates.empty && !$props.loading)
                  ? (vue.openBlock(), vue.createBlock(vue.resolveDynamicComponent($props.templates.empty), { key: 0 }))
                  : vue.createCommentVNode("", true),
                ($props.templates.loading && $props.loading)
                  ? (vue.openBlock(), vue.createBlock(vue.resolveDynamicComponent($props.templates.loading), { key: 1 }))
                  : vue.createCommentVNode("", true)
              ], 8, ["colspan"])
            ]))
      ]))
    }

    script$7.render = render$7;

    var script$8 = {
        props: {
            columnGroup: {
                type: null,
                default: null
            },
            columns: {
                type: null,
                default: null
            },
        },
        methods: {
            columnProp(col, prop) {
                return col.props ? ((col.type.props[prop].type === Boolean && col.props[prop] === '') ? true : col.props[prop]) : null;
            }
        },
        computed: {
            hasFooter() {
                let hasFooter = false;

                if (this.columnGroup) {
                    hasFooter = true;
                }
                else if (this.columns) {
                    for (let col of this.columns) {
                        if (this.columnProp(col, 'footer') || (col.children && col.children.footer)) {
                            hasFooter = true;
                            break;
                        }
                    }
                }

                return hasFooter;
            }
        }
    };

    const _hoisted_1$6 = {
      key: 0,
      class: "p-datatable-tfoot"
    };
    const _hoisted_2$4 = { key: 0 };

    function render$8(_ctx, _cache, $props, $setup, $data, $options) {
      return ($options.hasFooter)
        ? (vue.openBlock(), vue.createBlock("tfoot", _hoisted_1$6, [
            (!$props.columnGroup)
              ? (vue.openBlock(), vue.createBlock("tr", _hoisted_2$4, [
                  (vue.openBlock(true), vue.createBlock(vue.Fragment, null, vue.renderList($props.columns, (col, i) => {
                    return (vue.openBlock(), vue.createBlock("td", {
                      key: $options.columnProp(col, 'columnKey')||$options.columnProp(col, 'field')||i,
                      style: $options.columnProp(col, 'footerStyle'),
                      class: $options.columnProp(col, 'footerClass'),
                      colspan: $options.columnProp(col, 'colspan'),
                      rowspan: $options.columnProp(col, 'rowspan')
                    }, [
                      (col.children && col.children.footer)
                        ? (vue.openBlock(), vue.createBlock(vue.resolveDynamicComponent(col.children.footer), {
                            key: 0,
                            column: col
                          }, null, 8, ["column"]))
                        : vue.createCommentVNode("", true),
                      vue.createTextVNode(" " + vue.toDisplayString($options.columnProp(col, 'footer')), 1)
                    ], 14, ["colspan", "rowspan"]))
                  }), 128))
                ]))
              : (vue.openBlock(true), vue.createBlock(vue.Fragment, { key: 1 }, vue.renderList($props.columnGroup.children.default(), (row, i) => {
                  return (vue.openBlock(), vue.createBlock("tr", { key: i }, [
                    (vue.openBlock(true), vue.createBlock(vue.Fragment, null, vue.renderList(row.children.default(), (col, i) => {
                      return (vue.openBlock(), vue.createBlock("td", {
                        key: $options.columnProp(col, 'columnKey')||$options.columnProp(col, 'field')||i,
                        style: $options.columnProp(col, 'footerStyle'),
                        class: $options.columnProp(col, 'footerClass'),
                        colspan: $options.columnProp(col, 'colspan'),
                        rowspan: $options.columnProp(col, 'rowspan')
                      }, [
                        (col.children && col.children.footer)
                          ? (vue.openBlock(), vue.createBlock(vue.resolveDynamicComponent(col.children.footer), {
                              key: 0,
                              column: col
                            }, null, 8, ["column"]))
                          : vue.createCommentVNode("", true),
                        vue.createTextVNode(" " + vue.toDisplayString($options.columnProp(col, 'footer')), 1)
                      ], 14, ["colspan", "rowspan"]))
                    }), 128))
                  ]))
                }), 128))
          ]))
        : vue.createCommentVNode("", true)
    }

    script$8.render = render$8;

    var script$9 = {
        emits: ['update:first', 'update:rows', 'page', 'update:sortField', 'update:sortOrder', 'update:multiSortMeta', 'sort', 'filter', 'row-click',
            'update:selection', 'row-select', 'row-unselect', 'update:contextMenuSelection', 'row-contextmenu', 'row-unselect-all', 'row-select-all',
            'column-resize-end', 'column-reorder', 'row-reorder', 'update:expandedRows', 'row-collapse', 'row-expand',
            'update:expandedRowGroups', 'rowgroup-collapse', 'rowgroup-expand', 'update:filters', 'virtual-scroll', 'state-restore', 'state-save',
            'cell-edit-init', 'cell-edit-complete', 'cell-edit-cancel', 'update:editingRows', 'row-edit-init', 'row-edit-save', 'row-edit-cancel'],
        props: {
            value: {
                type: Array,
                default: null
            },
            dataKey: {
                type: String,
                default: null
            },
            rows: {
                type: Number,
                default: 0
            },
            first: {
                type: Number,
                default: 0
            },
            totalRecords: {
                type: Number,
                default: 0
            },
            paginator: {
                type: Boolean,
                default: false
            },
            paginatorPosition: {
                type: String,
                default: 'bottom'
            },
            alwaysShowPaginator: {
                type: Boolean,
                default: true
            },
            paginatorTemplate: {
                type: String,
                default: 'FirstPageLink PrevPageLink PageLinks NextPageLink LastPageLink RowsPerPageDropdown'
            },
            pageLinkSize: {
                type: Number,
                default: 5
            },
            rowsPerPageOptions: {
                type: Array,
                default: null
            },
            currentPageReportTemplate: {
                type: String,
                default: '({currentPage} of {totalPages})'
            },
            lazy: {
                type: Boolean,
                default: false
            },
            loading: {
                type: Boolean,
                default: false
            },
            loadingIcon: {
                type: String,
                default: 'pi pi-spinner'
            },
            sortField: {
                type: [String, Function],
                default: null
            },
            sortOrder: {
                type: Number,
                default: null
            },
            defaultSortOrder: {
                type: Number,
                default: 1
            },
            multiSortMeta: {
                type: Array,
                default: null
            },
            sortMode: {
                type: String,
                default: 'single'
            },
            removableSort: {
                type: Boolean,
                default: false
            },
            filters: {
                type: Object,
                default: null
            },
            filterLocale: {
                type: String,
                default: undefined
            },
            selection: {
                type: [Array,Object],
                default: null
            },
            selectionMode: {
                type: String,
                default: null
            },
            compareSelectionBy: {
                type: String,
                default: 'deepEquals'
            },
            metaKeySelection: {
                type: Boolean,
                default: true
            },
            contextMenu: {
                type: Boolean,
                default: false
            },
            contextMenuSelection: {
                type: Object,
                default: null
            },
            rowHover: {
                type: Boolean,
                default: false
            },
            csvSeparator: {
                type: String,
                default: ','
            },
            exportFilename: {
                type: String,
                default: 'download'
            },
            autoLayout: {
                type: Boolean,
                default: false
            },
            resizableColumns: {
                type: Boolean,
                default: false
            },
            columnResizeMode: {
                type: String,
                default: 'fit'
            },
            reorderableColumns: {
                type: Boolean,
                default: false
            },
            expandedRows: {
                type: Array,
                default: null
            },
            expandedRowIcon: {
                type: String,
                default: 'pi-chevron-down'
            },
            collapsedRowIcon: {
                type: String,
                default: 'pi-chevron-right'
            },
            rowGroupMode: {
                type: String,
                default: null
            },
            groupRowsBy: {
                type: [Array,String],
                default: null
            },
            expandableRowGroups: {
                type: Boolean,
                default: false
            },
            expandedRowGroups: {
                type: Array,
                default: null
            },
            stateStorage: {
                type: String,
                default: 'session'
            },
            stateKey: {
                type: String,
                default: null
            },
            editMode: {
                type: String,
                default: null
            },
            editingRows: {
                type: Array,
                default: null
            },
            rowClass: {
                type: null,
                default: null
            },
            scrollable: {
                type: Boolean,
                default: false
            },
            scrollHeight: {
                type: String,
                default: null
            },
            frozenValue: {
                type: Array,
                default: null
            },
            frozenWidth: {
                type: String,
                default: null
            },
            virtualScroll: {
                type: Boolean,
                default: false
            },
            virtualRowHeight: {
                type: Number,
                default: 28
            },
            virtualScrollDelay: {
                type: Number,
                default: 150
            }
        },
        data() {
            return {
                d_first: this.first,
                d_rows: this.rows,
                d_sortField: this.sortField,
                d_sortOrder: this.sortOrder,
                d_multiSortMeta: this.multiSortMeta ? [...this.multiSortMeta] : [],
                d_selectionKeys: null,
                d_expandedRowKeys: null,
                d_columnOrder: null,
                d_editingRowKeys: null
            };
        },
        rowTouched: false,
        anchorRowIndex: null,
        rangeRowIndex: null,
        documentColumnResizeListener: null,
        documentColumnResizeEndListener: null,
        lastResizeHelperX: null,
        resizeColumnElement: null,
        columnResizing: false,
        colReorderIconWidth: null,
        colReorderIconHeight: null,
        draggedColumn: null,
        draggedRowIndex: null,
        droppedRowIndex: null,
        rowDragging: null,
        columnWidthsState: null,
        tableWidthState: null,
        columnWidthsRestored: false,
        virtualScrollTimer: null,
        watch: {
            first(newValue) {
                this.d_first = newValue;
            },
            rows(newValue) {
                this.d_rows = newValue;
            },
            sortField(newValue) {
                this.d_sortField = newValue;
            },
            sortOrder(newValue) {
                this.d_sortOrder = newValue;
            },
            multiSortMeta(newValue) {
                this.d_multiSortMeta = newValue;
            },
            selection(newValue) {
                if (this.dataKey) {
                    this.updateSelectionKeys(newValue);
                }
            },
            expandedRows(newValue) {
                if (this.dataKey) {
                    this.updateExpandedRowKeys(newValue);
                }
            },
            editingRows(newValue) {
                if (this.dataKey) {
                    this.updateEditingRowKeys(newValue);
                }
            }
        },
        beforeMount() {
            if (this.isStateful()) {
                this.restoreState();
            }
        },
        mounted() {
            if (this.reorderableColumns) {
                let columnOrder = [];
                this.columns.forEach(col => columnOrder.push(this.columnProp(col, 'columnKey')||this.columnProp(col, 'field')));
                this.d_columnOrder = columnOrder;
            }
        },
        beforeUnmount() {
            this.unbindColumnResizeEvents();
        },
        updated() {
            if (this.isStateful()) {
                this.saveState();

                if (this.resizableColumns && !this.columnWidthsRestored) {
                    this.restoreColumnWidths();
                    this.columnWidthsRestored = true;
                }
            }
        },
        methods: {
            columnProp(col, prop) {
                return col.props ? ((col.type.props[prop].type === Boolean && col.props[prop] === '') ? true : col.props[prop]) : null;
            },
            onPage(event) {
                this.d_first = event.first;
                this.d_rows = event.rows;

                let pageEvent = this.createLazyLoadEvent(event);
                pageEvent.pageCount = event.pageCount;
                pageEvent.page = event.page;

                this.$emit('update:first', this.d_first);
                this.$emit('update:rows', this.d_rows);
                this.$emit('page', pageEvent);
            },
            onColumnHeaderClick(e) {
                const event = e.originalEvent;
                const column = e.column;

                if (this.columnProp(column, 'sortable')) {
                    const targetNode = event.target;
                    const columnField = this.columnProp(column, 'sortField') || this.columnProp(column, 'field');

                    if (utils.DomHandler.hasClass(targetNode, 'p-sortable-column') || utils.DomHandler.hasClass(targetNode, 'p-column-title')
                        || utils.DomHandler.hasClass(targetNode, 'p-sortable-column-icon') || utils.DomHandler.hasClass(targetNode.parentElement, 'p-sortable-column-icon')) {
                        utils.DomHandler.clearSelection();

                        if (this.sortMode === 'single') {
                            if (this.d_sortField === columnField) {
                                if (this.removableSort && (this.d_sortOrder * -1 === this.defaultSortOrder)) {
                                    this.d_sortOrder = null;
                                    this.d_sortField = null;
                                }
                                else {
                                    this.d_sortOrder = this.d_sortOrder * -1;
                                }
                            }
                            else {
                                this.d_sortOrder = this.defaultSortOrder;
                                this.d_sortField = columnField;
                            }

                            this.$emit('update:sortField', this.d_sortField);
                            this.$emit('update:sortOrder', this.d_sortOrder);
                            this.resetPage();
                        }
                        else if (this.sortMode === 'multiple') {
                            let metaKey = event.metaKey || event.ctrlKey;
                            if (!metaKey) {
                                this.d_multiSortMeta =  this.d_multiSortMeta.filter(meta => meta.field === columnField);
                            }

                            this.addMultiSortField(columnField);
                            this.$emit('update:multiSortMeta', this.d_multiSortMeta);
                        }

                        this.$emit('sort', this.createLazyLoadEvent(event));
                    }
                }
            },
            sortSingle(value) {
                let data = [...value];

                data.sort((data1, data2) => {
                    let value1 = utils.ObjectUtils.resolveFieldData(data1, this.d_sortField);
                    let value2 = utils.ObjectUtils.resolveFieldData(data2, this.d_sortField);

                    let result = null;

                    if (value1 == null && value2 != null)
                        result = -1;
                    else if (value1 != null && value2 == null)
                        result = 1;
                    else if (value1 == null && value2 == null)
                        result = 0;
                    else if (typeof value1 === 'string' && typeof value2 === 'string')
                        result = value1.localeCompare(value2, undefined, { numeric: true });
                    else
                        result = (value1 < value2) ? -1 : (value1 > value2) ? 1 : 0;

                    return (this.d_sortOrder * result);
                });

                return data;
            },
            sortMultiple(value) {
                let data = [...value];

                data.sort((data1, data2) => {
                    return this.multisortField(data1, data2, 0);
                });

                return data;
            },
            multisortField(data1, data2, index) {
                const value1 = utils.ObjectUtils.resolveFieldData(data1, this.d_multiSortMeta[index].field);
                const value2 = utils.ObjectUtils.resolveFieldData(data2, this.d_multiSortMeta[index].field);
                let result = null;

                if (typeof value1 === 'string' || value1 instanceof String) {
                    if (value1.localeCompare && (value1 !== value2)) {
                        return (this.d_multiSortMeta[index].order * value1.localeCompare(value2, undefined, { numeric: true }));
                    }
                }
                else {
                    result = (value1 < value2) ? -1 : 1;
                }

                if (value1 === value2)  {
                    return (this.d_multiSortMeta.length - 1) > (index) ? (this.multisortField(data1, data2, index + 1)) : 0;
                }

                return (this.d_multiSortMeta[index].order * result);
            },
            addMultiSortField(field) {
                let index =  this.d_multiSortMeta.findIndex(meta => meta.field === field);

                if (index >= 0) {
                    if (this.removableSort && (this.d_multiSortMeta[index].order * -1 === this.defaultSortOrder))
                        this.d_multiSortMeta.splice(index, 1);
                    else
                        this.d_multiSortMeta[index] = {field: field, order: this.d_multiSortMeta[index].order * -1};
                }
                else {
                    this.d_multiSortMeta.push({field: field, order: this.defaultSortOrder});
                }

                this.d_multiSortMeta = [...this.d_multiSortMeta];
            },
            filter(data) {
                this.d_first = 0;
                this.$emit('update:first', this.d_first);

                let filteredValue = [];

                for(let i = 0; i < data.length; i++) {
                    let localMatch = true;
                    let globalMatch = false;

                    for(let j = 0; j < this.columns.length; j++) {
                        let col = this.columns[j];
                        let columnField = this.columnProp(col, 'filterField') || this.columnProp(col, 'field');

                        //local
                        if (Object.prototype.hasOwnProperty.call(this.filters, columnField)) {
                            let filterValue = this.filters[columnField];
                            let dataFieldValue = utils.ObjectUtils.resolveFieldData(data[i], columnField);
                            let filterConstraint = this.columnProp(col, 'filterMatchMode') === 'custom' ? (col.props && col.props.filterFunction) : utils.FilterUtils[this.columnProp(col, 'filterMatchMode')||'startsWith'];
                            if (!filterConstraint(dataFieldValue, filterValue, this.filterLocale)) {
                                localMatch = false;
                            }

                            if (!localMatch) {
                                break;
                            }
                        }

                        if (!this.columnProp(col, 'excludeGlobalFilter') && this.hasGlobalFilter() && !globalMatch) {
                            globalMatch = utils.FilterUtils.contains(utils.ObjectUtils.resolveFieldData(data[i], columnField), this.filters['global'], this.filterLocale);
                        }
                    }

                    let matches = localMatch;
                    if (this.hasGlobalFilter()) {
                        matches = localMatch && globalMatch;
                    }

                    if (matches) {
                        filteredValue.push(data[i]);
                    }
                }

                if (filteredValue.length === data.length) {
                    filteredValue = data;
                }

                let filterEvent = this.createLazyLoadEvent();
                filterEvent.filteredValue = filteredValue;
                this.$emit('filter', filterEvent);

                return filteredValue;
            },
            onRowClick(e) {
                const event = e.originalEvent;
                if (utils.DomHandler.isClickable(event.target)) {
                    return;
                }

                this.$emit('row-click', e);

                if (this.selectionMode) {
                    const rowData = e.data;
                    const rowIndex = e.index;

                    if (this.isMultipleSelectionMode() && event.shiftKey && this.anchorRowIndex != null) {
                        utils.DomHandler.clearSelection();
                        this.rangeRowIndex = rowIndex;
                        this.selectRange(event);
                    }
                    else {
                        const selected = this.isSelected(rowData);
                        const metaSelection = this.rowTouched ? false : this.metaKeySelection;
                        this.anchorRowIndex = rowIndex;
                        this.rangeRowIndex = rowIndex;

                        if (metaSelection) {
                            let metaKey = event.metaKey || event.ctrlKey;

                            if (selected && metaKey) {
                                if(this.isSingleSelectionMode()) {
                                    this.$emit('update:selection', null);
                                }
                                else {
                                    const selectionIndex = this.findIndexInSelection(rowData);
                                    const _selection = this.selection.filter((val,i) => i != selectionIndex);
                                    this.$emit('update:selection', _selection);
                                }

                                this.$emit('row-unselect', {originalEvent: event, data: rowData, index: event.index, type: 'row'});
                            }
                            else {
                                if(this.isSingleSelectionMode()) {
                                    this.$emit('update:selection', rowData);
                                }
                                else if (this.isMultipleSelectionMode()) {
                                    let _selection = metaKey ? (this.selection || []) : [];
                                    _selection = [..._selection, rowData];
                                    this.$emit('update:selection', _selection);
                                }

                                this.$emit('row-select', {originalEvent: event, data: rowData, index: event.index, type: 'row'});
                            }
                        }
                        else {
                            if (this.selectionMode === 'single') {
                                if (selected) {
                                    this.$emit('update:selection', null);
                                    this.$emit('row-unselect', {originalEvent: event, data: rowData, index: event.index, type: 'row'});
                                }
                                else {
                                    this.$emit('update:selection', rowData);
                                    this.$emit('row-select', {originalEvent: event, data: rowData, index: event.index, type: 'row'});
                                }
                            }
                            else if (this.selectionMode === 'multiple') {
                                if (selected) {
                                    const selectionIndex = this.findIndexInSelection(rowData);
                                    const _selection = this.selection.filter((val, i) => i != selectionIndex);
                                    this.$emit('update:selection', _selection);
                                    this.$emit('row-unselect', {originalEvent: event, data: rowData, index: event.index, type: 'row'});
                                }
                                else {
                                    const _selection = this.selection ? [...this.selection, rowData] : [rowData];
                                    this.$emit('update:selection', _selection);
                                    this.$emit('row-select', {originalEvent: event, data: rowData, index: event.index, type: 'row'});
                                }
                            }
                        }
                    }
                }

                this.rowTouched = false;
            },
            onRowRightClick(event) {
                utils.DomHandler.clearSelection();
                event.originalEvent.target.focus();

                this.$emit('update:contextMenuSelection', event.data);
                this.$emit('row-contextmenu', event);
            },
            onRowTouchEnd() {
                this.rowTouched = true;
            },
            onRowKeyDown(e) {
                const event = e.originalEvent;
                const rowData = e.data;
                const rowIndex = e.index;

                if (this.selectionMode) {
                    const row = event.target;

                    switch (event.which) {
                        //down arrow
                        case 40:
                            var nextRow = this.findNextSelectableRow(row);
                            if (nextRow) {
                                nextRow.focus();
                            }

                            event.preventDefault();
                        break;

                        //up arrow
                        case 38:
                            var prevRow = this.findPrevSelectableRow(row);
                            if (prevRow) {
                                prevRow.focus();
                            }

                            event.preventDefault();
                        break;

                        //enter
                        case 13:
                            this.onRowClick({originalEvent: event, data: rowData, index: rowIndex});
                        break;
                    }
                }
            },
            findNextSelectableRow(row) {
                let nextRow = row.nextElementSibling;
                if (nextRow) {
                    if (utils.DomHandler.hasClass(nextRow, 'p-selectable-row'))
                        return nextRow;
                    else
                        return this.findNextSelectableRow(nextRow);
                }
                else {
                    return null;
                }
            },
            findPrevSelectableRow(row) {
                let prevRow = row.previousElementSibling;
                if (prevRow) {
                    if (utils.DomHandler.hasClass(prevRow, 'p-selectable-row'))
                        return prevRow;
                    else
                        return this.findPrevSelectableRow(prevRow);
                }
                else {
                    return null;
                }
            },
            toggleRowWithRadio(event) {
                const rowData = event.data;

                if (this.isSelected(rowData)) {
                    this.$emit('update:selection', null);
                    this.$emit('row-unselect', {originalEvent: event, data: rowData, type: 'radiobutton'});
                }
                else {
                    this.$emit('update:selection', rowData);
                    this.$emit('row-select', {originalEvent: event, data: rowData, type: 'radiobutton'});
                }
            },
            toggleRowWithCheckbox(event) {
                const rowData = event.data;

                if (this.isSelected(rowData)) {
                    const selectionIndex = this.findIndexInSelection(rowData);
                    const _selection = this.selection.filter((val, i) => i != selectionIndex);
                    this.$emit('update:selection', _selection);
                    this.$emit('row-unselect', {originalEvent: event, data: rowData, type: 'checkbox'});
                }
                else {
                    let _selection = this.selection ? [...this.selection] : [];
                    _selection = [..._selection, rowData];
                    this.$emit('update:selection', _selection);
                    this.$emit('row-select', {originalEvent: event, data: rowData, type: 'checkbox'});
                }
            },
            toggleRowsWithCheckbox(event) {
                const processedData = this.processedData;
                const checked = this.allRowsSelected;
                const _selection = checked ? [] : (processedData ? [...processedData] : [...this.value]);
                this.$emit('update:selection', _selection);

                if (checked)
                    this.$emit('row-unselect-all', {originalEvent: event});
                else
                    this.$emit('row-select-all', {originalEvent: event, data: _selection});
            },
            isSingleSelectionMode() {
                return this.selectionMode === 'single';
            },
            isMultipleSelectionMode() {
                return this.selectionMode === 'multiple';
            },
            isSelected(rowData) {
                if (rowData && this.selection) {
                    if (this.dataKey) {
                        return this.d_selectionKeys ? this.d_selectionKeys[utils.ObjectUtils.resolveFieldData(rowData, this.dataKey)] !== undefined : false;
                    }
                    else {
                        if (this.selection instanceof Array)
                            return this.findIndexInSelection(rowData) > -1;
                        else
                            return this.equals(rowData, this.selection);
                    }
                }

                return false;
            },
            findIndexInSelection(rowData) {
                return this.findIndex(rowData, this.selection);
            },
            findIndex(rowData, collection) {
                let index = -1;
                if (collection && collection.length) {
                    for (let i = 0; i < collection.length; i++) {
                        if (this.equals(rowData, collection[i])) {
                            index = i;
                            break;
                        }
                    }
                }

                return index;
            },
            updateSelectionKeys(selection) {
                this.d_selectionKeys = {};
                if (Array.isArray(selection)) {
                    for (let data of selection) {
                        this.d_selectionKeys[String(utils.ObjectUtils.resolveFieldData(data, this.dataKey))] = 1;
                    }
                }
                else {
                    this.d_selectionKeys[String(utils.ObjectUtils.resolveFieldData(selection, this.dataKey))] = 1;
                }
            },
            updateExpandedRowKeys(expandedRows) {
                if (expandedRows && expandedRows.length) {
                    this.d_expandedRowKeys = {};
                    for (let data of expandedRows) {
                        this.d_expandedRowKeys[String(utils.ObjectUtils.resolveFieldData(data, this.dataKey))] = 1;
                    }
                }
                else {
                    this.d_expandedRowKeys = null;
                }
            },
            updateEditingRowKeys(editingRows) {
                if (editingRows && editingRows.length) {
                    this.d_editingRowKeys = {};
                    for (let data of editingRows) {
                        this.d_editingRowKeys[String(utils.ObjectUtils.resolveFieldData(data, this.dataKey))] = 1;
                    }
                }
                else {
                    this.d_editingRowKeys = null;
                }
            },
            equals(data1, data2) {
                return this.compareSelectionBy === 'equals' ? (data1 === data2) : utils.ObjectUtils.equals(data1, data2, this.dataKey);
            },
            selectRange(event) {
                let rangeStart, rangeEnd;

                if (this.rangeRowIndex > this.anchorRowIndex) {
                    rangeStart = this.anchorRowIndex;
                    rangeEnd = this.rangeRowIndex;
                }
                else if(this.rangeRowIndex < this.anchorRowIndex) {
                    rangeStart = this.rangeRowIndex;
                    rangeEnd = this.anchorRowIndex;
                }
                else {
                    rangeStart = this.rangeRowIndex;
                    rangeEnd = this.rangeRowIndex;
                }

                if (this.lazy && this.paginator) {
                    rangeStart -= this.first;
                    rangeEnd -= this.first;
                }

                const value = this.processedData;
                let _selection = [];
                for(let i = rangeStart; i <= rangeEnd; i++) {
                    let rangeRowData = value[i];
                    _selection.push(rangeRowData);
                    this.$emit('row-select', {originalEvent: event, data: rangeRowData, type: 'row'});
                }

                this.$emit('update:selection', _selection);
            },
            exportCSV(options) {
                let data = this.processedData;
                let csv = '\ufeff';

                if (options && options.selectionOnly) {
                    data = this.selection || [];
                }

                //headers
                let headerInitiated = false;
                for (let i = 0; i < this.columns.length; i++) {
                    let column = this.columns[i];

                    if (this.columnProp(column, 'exportable') !== false && this.columnProp(column, 'field')) {
                        if (headerInitiated)
                            csv += this.csvSeparator;
                        else
                            headerInitiated = true;

                        csv += '"' + (this.columnProp(column, 'header') || this.columnProp(column, 'field')) + '"';
                    }
                }

                //body
                if (data) {
                    data.forEach(record => {
                        csv += '\n';
                        let rowInitiated = false;
                        for (let i = 0; i < this.columns.length; i++) {
                            let column = this.columns[i];
                            if (this.columnProp(column, 'exportable') !== false && this.columnProp(column, 'field')) {
                                if (rowInitiated)
                                    csv += this.csvSeparator;
                                else
                                    rowInitiated = true;

                                let cellData = utils.ObjectUtils.resolveFieldData(record, this.columnProp(column, 'field'));

                                if (cellData != null) {
                                    if (this.exportFunction) {
                                        cellData = this.exportFunction({
                                            data: cellData,
                                            field: this.columnProp(column, 'field')
                                        });
                                    }
                                    else
                                        cellData = String(cellData).replace(/"/g, '""');
                                }
                                else
                                    cellData = '';

                                csv += '"' + cellData + '"';
                            }
                        }
                    });
                }

                let blob = new Blob([csv], {
                    type: 'text/csv;charset=utf-8;'
                });

                if (window.navigator.msSaveOrOpenBlob) {
                    navigator.msSaveOrOpenBlob(blob, this.exportFilename + '.csv');
                }
                else {
                    let link = document.createElement("a");
                    link.style.display = 'none';
                    document.body.appendChild(link);
                    if (link.download !== undefined) {
                        link.setAttribute('href', URL.createObjectURL(blob));
                        link.setAttribute('download', this.exportFilename + '.csv');
                        link.click();
                    }
                    else {
                        csv = 'data:text/csv;charset=utf-8,' + csv;
                        window.open(encodeURI(csv));
                    }
                    document.body.removeChild(link);
                }
            },
            resetPage() {
                this.d_first = 0;
                this.$emit('update:first', this.d_first);
            },
            onColumnResizeStart(event) {
                let containerLeft = utils.DomHandler.getOffset(this.$el).left;
                this.resizeColumnElement = event.target.parentElement;
                this.columnResizing = true;
                this.lastResizeHelperX = (event.pageX - containerLeft + this.$el.scrollLeft);

                this.bindColumnResizeEvents();
            },
            onColumnResize(event) {
                let containerLeft = utils.DomHandler.getOffset(this.$el).left;
                utils.DomHandler.addClass(this.$el, 'p-unselectable-text');
                this.$refs.resizeHelper.style.height = this.$el.offsetHeight + 'px';
                this.$refs.resizeHelper.style.top = 0 + 'px';
                this.$refs.resizeHelper.style.left = (event.pageX - containerLeft + this.$el.scrollLeft) + 'px';

                this.$refs.resizeHelper.style.display = 'block';
            },
            onColumnResizeEnd() {
                let delta = this.$refs.resizeHelper.offsetLeft - this.lastResizeHelperX;
                let columnWidth = this.resizeColumnElement.offsetWidth;
                let newColumnWidth = columnWidth + delta;
                let minWidth = this.resizeColumnElement.style.minWidth||15;

                if (columnWidth + delta > parseInt(minWidth, 10)) {
                    if (this.columnResizeMode === 'fit') {
                        let nextColumn = this.resizeColumnElement.nextElementSibling;
                        let nextColumnWidth = nextColumn.offsetWidth - delta;

                        if (newColumnWidth > 15 && nextColumnWidth > 15) {
                            if(this.scrollable) {
                                const scrollableView = this.findParentScrollableView(this.resizeColumnElement);
                                const scrollableBodyTable = utils.DomHandler.findSingle(scrollableView, 'table.p-datatable-scrollable-body-table');
                                const scrollableHeaderTable = utils.DomHandler.findSingle(scrollableView, 'table.p-datatable-scrollable-header-table');
                                const scrollableFooterTable = utils.DomHandler.findSingle(scrollableView, 'table.p-datatable-scrollable-footer-table');
                                const resizeColumnIndex = utils.DomHandler.index(this.resizeColumnElement);

                                this.resizeColGroup(scrollableHeaderTable, resizeColumnIndex, newColumnWidth, nextColumnWidth);
                                this.resizeColGroup(scrollableBodyTable, resizeColumnIndex, newColumnWidth, nextColumnWidth);
                                this.resizeColGroup(scrollableFooterTable, resizeColumnIndex, newColumnWidth, nextColumnWidth);
                            }
                            else {
                                this.resizeColumnElement.style.width = newColumnWidth + 'px';
                                if(nextColumn) {
                                    nextColumn.style.width = nextColumnWidth + 'px';
                                }
                            }
                        }
                    }
                    else if (this.columnResizeMode === 'expand') {
                        if (this.scrollable) {
                            this.resizeScrollableTable(this.resizeColumnElement, newColumnWidth, delta);
                        }
                        else {
                            this.$refs.table.style.width = this.$refs.table.offsetWidth + delta + 'px';
                            this.resizeColumnElement.style.width = newColumnWidth + 'px';
                        }
                    }

                    this.$emit('column-resize-end', {
                        element: this.resizeColumnElement,
                        delta: delta
                    });
                }

                this.$refs.resizeHelper.style.display = 'none';
                this.resizeColumn = null;
                utils.DomHandler.removeClass(this.$el, 'p-unselectable-text');

                this.unbindColumnResizeEvents();

                if (this.isStateful()) {
                    this.saveState();
                }
            },
            resizeColGroup(table, resizeColumnIndex, newColumnWidth, nextColumnWidth) {
                if(table) {
                    let colGroup = table.children[0].nodeName === 'COLGROUP' ? table.children[0] : null;

                    if(colGroup) {
                        let col = colGroup.children[resizeColumnIndex];
                        let nextCol = col.nextElementSibling;
                        col.style.width = newColumnWidth + 'px';

                        if (nextCol && nextColumnWidth) {
                            nextCol.style.width = nextColumnWidth + 'px';
                        }
                    }
                    else {
                        throw new Error("Scrollable tables require a colgroup to support resizable columns");
                    }
                }
            },
            bindColumnResizeEvents() {
                if (!this.documentColumnResizeListener) {
                    this.documentColumnResizeListener = document.addEventListener('mousemove', () => {
                        if(this.columnResizing) {
                            this.onColumnResize(event);
                        }
                    });
                }

                if (!this.documentColumnResizeEndListener) {
                    this.documentColumnResizeEndListener = document.addEventListener('mouseup', () => {
                        if(this.columnResizing) {
                            this.columnResizing = false;
                            this.onColumnResizeEnd();
                        }
                    });
                }

            },
            unbindColumnResizeEvents() {
                if (this.documentColumnResizeListener) {
                    document.removeEventListener('document', this.documentColumnResizeListener);
                    this.documentColumnResizeListener = null;
                }

                if (this.documentColumnResizeEndListener) {
                    document.removeEventListener('document', this.documentColumnResizeEndListener);
                     this.documentColumnResizeEndListener = null;
                }
            },
            onColumnHeaderMouseDown(e) {
                const event = e.originalEvent;
                const column = e.column;

                if (this.reorderableColumns && this.columnProp(column, 'reorderableColumn') !== false) {
                    if (event.target.nodeName === 'INPUT' || event.target.nodeName === 'TEXTAREA' || utils.DomHandler.hasClass(event.target, 'p-column-resizer'))
                        event.currentTarget.draggable = false;
                    else
                        event.currentTarget.draggable = true;
                }
            },
            onColumnHeaderDragStart(event) {
                if (this.columnResizing) {
                    event.preventDefault();
                    return;
                }

                this.colReorderIconWidth = utils.DomHandler.getHiddenElementOuterWidth(this.$refs.reorderIndicatorUp);
                this.colReorderIconHeight = utils.DomHandler.getHiddenElementOuterHeight(this.$refs.reorderIndicatorUp);

                this.draggedColumn = this.findParentHeader(event.target);
                event.dataTransfer.setData('text', 'b'); // Firefox requires this to make dragging possible
            },
            onColumnHeaderDragOver(event) {
                let dropHeader = this.findParentHeader(event.target);
                if(this.reorderableColumns && this.draggedColumn && dropHeader) {
                    event.preventDefault();
                    let containerOffset = utils.DomHandler.getOffset(this.$el);
                    let dropHeaderOffset = utils.DomHandler.getOffset(dropHeader);

                    if (this.draggedColumn !== dropHeader) {
                        let targetLeft =  dropHeaderOffset.left - containerOffset.left;
                        let columnCenter = dropHeaderOffset.left + dropHeader.offsetWidth / 2;

                        this.$refs.reorderIndicatorUp.style.top = dropHeaderOffset.top - containerOffset.top - (this.colReorderIconHeight - 1) + 'px';
                        this.$refs.reorderIndicatorDown.style.top = dropHeaderOffset.top - containerOffset.top + dropHeader.offsetHeight + 'px';

                        if(event.pageX > columnCenter) {
                            this.$refs.reorderIndicatorUp.style.left = (targetLeft + dropHeader.offsetWidth - Math.ceil(this.colReorderIconWidth / 2)) + 'px';
                            this.$refs.reorderIndicatorDown.style.left = (targetLeft + dropHeader.offsetWidth - Math.ceil(this.colReorderIconWidth / 2))+ 'px';
                            this.dropPosition = 1;
                        }
                        else {
                            this.$refs.reorderIndicatorUp.style.left = (targetLeft - Math.ceil(this.colReorderIconWidth / 2)) + 'px';
                            this.$refs.reorderIndicatorDown.style.left = (targetLeft - Math.ceil(this.colReorderIconWidth / 2))+ 'px';
                            this.dropPosition = -1;
                        }

                        this.$refs.reorderIndicatorUp.style.display = 'block';
                        this.$refs.reorderIndicatorDown.style.display = 'block';
                    }
                }
            },
            onColumnHeaderDragLeave(event) {
                if(this.reorderableColumns && this.draggedColumn) {
                    event.preventDefault();
                    this.$refs.reorderIndicatorUp.style.display = 'none';
                    this.$refs.reorderIndicatorDown.style.display = 'none';
                }
            },
            onColumnHeaderDrop(event) {
                event.preventDefault();
                if (this.draggedColumn) {
                    let dragIndex = utils.DomHandler.index(this.draggedColumn);
                    let dropIndex = utils.DomHandler.index(this.findParentHeader(event.target));
                    let allowDrop = (dragIndex !== dropIndex);
                    if (allowDrop && ((dropIndex - dragIndex === 1 && this.dropPosition === -1) || (dragIndex - dropIndex === 1 && this.dropPosition === 1))) {
                        allowDrop = false;
                    }

                    if (allowDrop) {
                        utils.ObjectUtils.reorderArray(this.d_columnOrder, dragIndex, dropIndex);

                        this.$emit('column-reorder', {
                            originalEvent: event,
                            dragIndex: dragIndex,
                            dropIndex: dropIndex
                        });
                    }

                    this.$refs.reorderIndicatorUp.style.display = 'none';
                    this.$refs.reorderIndicatorDown.style.display = 'none';
                    this.draggedColumn.draggable = false;
                    this.draggedColumn = null;
                    this.dropPosition = null;
                }
            },
            findParentHeader(element) {
                if(element.nodeName === 'TH') {
                    return element;
                }
                else {
                    let parent = element.parentElement;
                    while(parent.nodeName !== 'TH') {
                        parent = parent.parentElement;
                        if (!parent) break;
                    }
                    return parent;
                }
            },
            findParentScrollableView(column) {
                if (column) {
                    let parent = column.parentElement;
                    while (parent && !utils.DomHandler.hasClass(parent, 'p-datatable-scrollable-view')) {
                        parent = parent.parentElement;
                    }

                    return parent;
                }
                else {
                    return null;
                }
            },
            findColumnByKey(columns, key) {
                if (columns && columns.length) {
                    for (let i = 0; i < columns.length; i++) {
                        let column = columns[i];
                        if (this.columnProp(column, 'columnKey') === key || this.columnProp(column, 'field') === key) {
                            return column;
                        }
                    }
                }

                return null;
            },
            resizeScrollableTable(column, newColumnWidth, delta) {
                const scrollableView = column ? this.findParentScrollableView(column) : this.$el;
                const scrollableBody = utils.DomHandler.findSingle(scrollableView, '.p-datatable-scrollable-body');
                const scrollableHeader = utils.DomHandler.findSingle(scrollableView, '.p-datatable-scrollable-header');
                const scrollableFooter = utils.DomHandler.findSingle(scrollableView, '.p-datatable-scrollable-footer');
                const scrollableBodyTable = utils.DomHandler.findSingle(scrollableBody, 'table.p-datatable-scrollable-body-table');
                const scrollableHeaderTable = utils.DomHandler.findSingle(scrollableHeader, 'table.p-datatable-scrollable-header-table');
                const scrollableFooterTable = utils.DomHandler.findSingle(scrollableFooter, 'table.p-datatable-scrollable-footer-table');

                const scrollableBodyTableWidth = column ? scrollableBodyTable.offsetWidth + delta : newColumnWidth;
                const scrollableHeaderTableWidth = column ? scrollableHeaderTable.offsetWidth + delta : newColumnWidth;
                const isContainerInViewport = this.$el.offsetWidth >= parseFloat(scrollableBodyTableWidth);

                let setWidth = (container, table, width, isContainerInViewport) => {
                    if (container && table) {
                        container.style.width = isContainerInViewport ? width + utils.DomHandler.calculateScrollbarWidth(scrollableBody) + 'px' : 'auto';
                        table.style.width = width + 'px';
                    }
                };

                setWidth(scrollableBody, scrollableBodyTable, scrollableBodyTableWidth, isContainerInViewport);
                setWidth(scrollableHeader, scrollableHeaderTable, scrollableHeaderTableWidth, isContainerInViewport);
                setWidth(scrollableFooter, scrollableFooterTable, scrollableHeaderTableWidth, isContainerInViewport);

                if (column) {
                    let resizeColumnIndex = utils.DomHandler.index(column);

                    this.resizeColGroup(scrollableHeaderTable, resizeColumnIndex, newColumnWidth, null);
                    this.resizeColGroup(scrollableBodyTable, resizeColumnIndex, newColumnWidth, null);
                    this.resizeColGroup(scrollableFooterTable, resizeColumnIndex, newColumnWidth, null);
                }
            },
            onRowMouseDown(event) {
                if (utils.DomHandler.hasClass(event.target, 'p-datatable-reorderablerow-handle'))
                    event.currentTarget.draggable = true;
                else
                    event.currentTarget.draggable = false;
            },
            onRowDragStart(e) {
                const event = e.originalEvent;
                const index = e.index;
                this.rowDragging = true;
                this.draggedRowIndex = index;
                event.dataTransfer.setData('text', 'b');    // For firefox
            },
            onRowDragOver(e) {
                const event = e.originalEvent;
                const index = e.index;

                if (this.rowDragging && this.draggedRowIndex !== index) {
                    let rowElement = event.currentTarget;
                    let rowY = utils.DomHandler.getOffset(rowElement).top + utils.DomHandler.getWindowScrollTop();
                    let pageY = event.pageY;
                    let rowMidY = rowY + utils.DomHandler.getOuterHeight(rowElement) / 2;
                    let prevRowElement = rowElement.previousElementSibling;

                    if (pageY < rowMidY) {
                        utils.DomHandler.removeClass(rowElement, 'p-datatable-dragpoint-bottom');

                        this.droppedRowIndex = index;
                        if (prevRowElement)
                            utils.DomHandler.addClass(prevRowElement, 'p-datatable-dragpoint-bottom');
                        else
                            utils.DomHandler.addClass(rowElement, 'p-datatable-dragpoint-top');
                    }
                    else {
                        if (prevRowElement)
                            utils.DomHandler.removeClass(prevRowElement, 'p-datatable-dragpoint-bottom');
                        else
                            utils.DomHandler.addClass(rowElement, 'p-datatable-dragpoint-top');

                        this.droppedRowIndex = index + 1;
                        utils.DomHandler.addClass(rowElement, 'p-datatable-dragpoint-bottom');
                    }

                    event.preventDefault();
                }
            },
            onRowDragLeave(event) {
                let rowElement = event.currentTarget;
                let prevRowElement = rowElement.previousElementSibling;
                if (prevRowElement) {
                    utils.DomHandler.removeClass(prevRowElement, 'p-datatable-dragpoint-bottom');
                }

                utils.DomHandler.removeClass(rowElement, 'p-datatable-dragpoint-bottom');
                utils.DomHandler.removeClass(rowElement, 'p-datatable-dragpoint-top');
            },
            onRowDragEnd(event) {
                this.rowDragging = false;
                this.draggedRowIndex = null;
                this.droppedRowIndex = null;
                event.currentTarget.draggable = false;
            },
            onRowDrop(event) {
                if (this.droppedRowIndex != null) {
                    let dropIndex = (this.draggedRowIndex > this.droppedRowIndex) ? this.droppedRowIndex : (this.droppedRowIndex === 0) ? 0 : this.droppedRowIndex - 1;
                    let processedData = [...this.processedData];
                    utils.ObjectUtils.reorderArray(processedData, this.draggedRowIndex, dropIndex);

                    this.$emit('row-reorder', {
                        originalEvent: event,
                        dragIndex: this.draggedRowIndex,
                        dropIndex: dropIndex,
                        value: processedData
                    });
                }

                //cleanup
                this.onRowDragLeave(event);
                this.onRowDragEnd(event);
                event.preventDefault();
            },
            toggleRow(event) {
                let rowData = event.data;
                let expanded;
                let expandedRowIndex;
                let _expandedRows = this.expandedRows ? [...this.expandedRows] : [];

                if (this.dataKey) {
                    expanded = this.d_expandedRowKeys ? this.d_expandedRowKeys[utils.ObjectUtils.resolveFieldData(rowData, this.dataKey)] !== undefined : false;
                }
                else {
                    expandedRowIndex = this.findIndex(rowData, this.expandedRows);
                    expanded = expandedRowIndex > -1;
                }

                if (expanded) {
                    if (expandedRowIndex == null) {
                        expandedRowIndex = this.findIndex(rowData, this.expandedRows);
                    }
                    _expandedRows.splice(expandedRowIndex, 1);
                    this.$emit('update:expandedRows', _expandedRows);
                    this.$emit('row-collapse', event);
                }
                else {
                    _expandedRows.push(rowData);
                    this.$emit('update:expandedRows', _expandedRows);
                    this.$emit('row-expand', event);
                }
            },
            toggleRowGroup(e) {
                const event = e.originalEvent;
                const data = e.data;
                const groupFieldValue = utils.ObjectUtils.resolveFieldData(data, this.groupRowsBy);
                let _expandedRowGroups = this.expandedRowGroups ? [...this.expandedRowGroups] : [];

                if (this.isRowGroupExpanded(data)) {
                    _expandedRowGroups = _expandedRowGroups.filter(group => group !== groupFieldValue);
                    this.$emit('update:expandedRowGroups', _expandedRowGroups);
                    this.$emit('rowgroup-collapse', {originalEvent: event, data: groupFieldValue});
                }
                else {
                    _expandedRowGroups.push(groupFieldValue);
                    this.$emit('update:expandedRowGroups', _expandedRowGroups);
                    this.$emit('rowgroup-expand', {originalEvent: event, data: groupFieldValue});
                }
            },
            isRowGroupExpanded(rowData) {
                if (this.expandableRowGroups && this.expandedRowGroups) {
                    let groupFieldValue = utils.ObjectUtils.resolveFieldData(rowData, this.groupRowsBy);
                    return this.expandedRowGroups.indexOf(groupFieldValue) > -1;
                }
                return false;
            },
            isStateful() {
                return this.stateKey != null;
            },
            getStorage() {
                switch(this.stateStorage) {
                    case 'local':
                        return window.localStorage;

                    case 'session':
                        return window.sessionStorage;

                    default:
                        throw new Error(this.stateStorage + ' is not a valid value for the state storage, supported values are "local" and "session".');
                }
            },
            saveState() {
                const storage = this.getStorage();
                let state = {};

                if (this.paginator) {
                    state.first = this.d_first;
                    state.rows = this.d_rows;
                }

                if (this.d_sortField) {
                    state.sortField = this.d_sortField;
                    state.sortOrder = this.d_sortOrder;
                }

                if (this.d_multiSortMeta) {
                    state.multiSortMeta = this.d_multiSortMeta;
                }

                if (this.hasFilters()) {
                    state.filters = this.filters;
                }

                if (this.resizableColumns) {
                    this.saveColumnWidths(state);
                }

                if (this.reorderableColumns) {
                    state.columnOrder = this.d_columnOrder;
                }

                if (this.expandedRows) {
                    state.expandedRows = this.expandedRows;
                    state.expandedRowKeys = this.d_expandedRowKeys;
                }

                if (this.expandedRowGroups) {
                    state.expandedRowGroups = this.expandedRowGroups;
                }

                if (this.selection) {
                    state.selection = this.selection;
                    state.selectionKeys = this.d_selectionKeys;
                }

                if (Object.keys(state).length) {
                    storage.setItem(this.stateKey, JSON.stringify(state));
                }

                this.$emit('state-save', state);
            },
            restoreState() {
                const storage = this.getStorage();
                const stateString = storage.getItem(this.stateKey);

                if (stateString) {
                    let restoredState = JSON.parse(stateString);

                    if (this.paginator) {
                        this.d_first = restoredState.first;
                        this.d_rows = restoredState.rows;
                    }

                    if (restoredState.sortField) {
                        this.d_sortField = restoredState.sortField;
                        this.d_sortOrder = restoredState.sortOrder;
                    }

                    if (restoredState.multiSortMeta) {
                        this.d_multiSortMeta = restoredState.multiSortMeta;
                    }

                    if (restoredState.filters) {
                        this.$emit('update:filters', restoredState.filters);
                    }

                    if (this.resizableColumns) {
                        this.columnWidthsState = restoredState.columnWidths;
                        this.tableWidthState = restoredState.tableWidth;
                    }

                    if (this.reorderableColumns) {
                        this.d_columnOrder = restoredState.columnOrder;
                    }

                    if (restoredState.expandedRows) {
                        this.d_expandedRowKeys = restoredState.expandedRowKeys;
                        this.$emit('update:expandedRows', restoredState.expandedRows);
                    }

                    if (restoredState.expandedRowGroups) {
                        this.$emit('update:expandedRowGroups', restoredState.expandedRowGroups);
                    }

                    if (restoredState.selection) {
                        this.d_selectionKeys = restoredState.d_selectionKeys;
                        this.$emit('update:selection', restoredState.selection);
                    }

                    this.$emit('state-restore', restoredState);
                }
            },
            saveColumnWidths(state) {
                let widths = [];
                let headers = utils.DomHandler.find(this.$el, '.p-datatable-thead > tr > th');
                headers.forEach(header => widths.push(utils.DomHandler.getOuterWidth(header)));
                state.columnWidths = widths.join(',');

                if (this.columnResizeMode === 'expand') {
                    state.tableWidth = this.scrollable ? utils.DomHandler.findSingle(this.$el, '.p-datatable-scrollable-header-table').style.width :
                                                        utils.DomHandler.getOuterWidth(this.$refs.table) + 'px';
                }
            },
            restoreColumnWidths() {
                if (this.columnWidthsState) {
                    let widths = this.columnWidthsState.split(',');

                    if (this.columnResizeMode === 'expand' && this.tableWidthState) {
                        if (this.scrollable) {
                            this.resizeScrollableTable(null, this.tableWidthState, 0);
                        }
                        else {
                            this.$refs.table.style.width = this.tableWidthState;
                            this.$el.style.width = this.tableWidthState;
                        }
                    }

                    if (this.scrollable) {
                        let headerCols = utils.DomHandler.find(this.$el, '.p-datatable-scrollable-header-table > colgroup > col');
                        let bodyCols = utils.DomHandler.find(this.$el, '.p-datatable-scrollable-body-table > colgroup > col');

                        headerCols.forEach((col, index) => col.style.width = widths[index] + 'px');
                        bodyCols.forEach((col, index) => col.style.width = widths[index] + 'px');
                    }
                    else {
                        let headers = utils.DomHandler.find(this.$refs.table, '.p-datatable-thead > tr > th');
                        headers.forEach((header, index) => header.style.width = widths[index] + 'px');
                    }


                }
            },
            onCellEditInit(event) {
                this.$emit('cell-edit-init', event);
            },
            onCellEditComplete(event) {
                this.$emit('cell-edit-complete', event);
            },
            onCellEditCancel(event) {
                this.$emit('cell-edit-cancel', event);
            },
            onRowEditInit(event) {
                let _editingRows = this.editingRows ? [...this.editingRows] : [];
                _editingRows.push(event.data);
                this.$emit('update:editingRows', _editingRows);
                this.$emit('row-edit-init', event);
            },
            onRowEditSave(event) {
                let _editingRows = [...this.editingRows];
                _editingRows.splice(this.findIndex(event.data, _editingRows), 1);
                this.$emit('update:editingRows', _editingRows);
                this.$emit('row-edit-save', event);
            },
            onRowEditCancel(event) {
                let _editingRows = [...this.editingRows];
                _editingRows.splice(this.findIndex(event.data, _editingRows), 1);
                this.$emit('update:editingRows', _editingRows);
                this.$emit('row-edit-cancel', event);
            },
            onVirtualScroll(event) {
                if(this.virtualScrollTimer) {
                    clearTimeout(this.virtualScrollTimer);
                }

                this.virtualScrollTimer = setTimeout(() => {
                    this.$emit('virtual-scroll', {
                            first: (event.page - 1) * this.rows,
                            rows: this.rows * 2
                        });
                    }, this.virtualScrollDelay);
            },
            createLazyLoadEvent(event) {
                let filterMatchModes;
                if (this.hasFilters()) {
                    filterMatchModes = {};
                    this.columns.forEach(col => {
                        if (col.field) {
                            filterMatchModes[col.field] = col.filterMatchMode;
                        }
                    });
                }

                return {
                    originalEvent: event,
                    first: this.d_first,
                    rows: this.d_rows,
                    sortField: this.d_sortField,
                    sortOrder: this.d_sortOrder,
                    multiSortMeta: this.d_multiSortMeta,
                    filters: this.filters,
                    filterMatchModes: filterMatchModes
                };
            },
            hasFilters() {
                return this.filters && Object.keys(this.filters).length > 0 && this.filters.constructor === Object;
            },
            hasGlobalFilter() {
                return this.filters && Object.prototype.hasOwnProperty.call(this.filters, 'global');
            },
            getChildren() {
                return this.$slots.default ? this.$slots.default() : null;
            }
        },
        computed: {
            containerClass() {
                return [
                    'p-datatable p-component', {
                        'p-datatable-hoverable-rows': (this.rowHover || this.selectionMode),
                        'p-datatable-auto-layout': this.autoLayout,
                        'p-datatable-resizable': this.resizableColumns,
                        'p-datatable-resizable-fit': this.resizableColumns && this.columnResizeMode === 'fit',
                        'p-datatable-scrollable': this.scrollable,
                        'p-datatable-virtual-scrollable': this.virtualScroll,
                        'p-datatable-flex-scrollable': (this.scrollable && this.scrollHeight === 'flex')
                    }
                ];
            },
            columns() {
                let cols = [];
                let children = this.getChildren();

                if (!children) {
                    return;
                }

                children.forEach(child => {
                    if (child.dynamicChildren)
                        cols = [...cols, ...child.children];
                    else if (child.type.name === 'column')
                        cols.push(child);
                });

                if (this.reorderableColumns && this.d_columnOrder) {
                    let orderedColumns = [];
                    for (let columnKey of this.d_columnOrder) {
                        let column = this.findColumnByKey(cols, columnKey);
                        if (column) {
                            orderedColumns.push(column);
                        }
                    }

                    return [...orderedColumns, ...cols.filter((item) => orderedColumns.indexOf(item) < 0)];
                }

                return cols;
            },
            frozenColumns() {
                let frozenColumns = [];

                for(let col of this.columns) {
                    if(this.columnProp(col, 'frozen')) {
                        frozenColumns = frozenColumns||[];
                        frozenColumns.push(col);
                    }
                }

                return frozenColumns;
            },
            scrollableColumns() {
                let scrollableColumns = [];

                for(let col of this.columns) {
                    if(!this.columnProp(col, 'frozen')) {
                        scrollableColumns = scrollableColumns||[];
                        scrollableColumns.push(col);
                    }
                }

                return scrollableColumns;
            },
            hasFrozenColumns() {
                return this.frozenColumns.length > 0;
            },
            headerColumnGroup() {
                const children = this.getChildren();
                if (children) {
                    for (let child of children) {
                        if (child.type.name === 'columngroup' && this.columnProp(child, 'type') === 'header') {
                            return child;
                        }
                    }
                }

                return null;
            },
            frozenHeaderColumnGroup() {
                const children = this.getChildren();
                if (children) {
                    for (let child of children) {
                        if (child.type.name === 'columngroup' && this.columnProp(child, 'type') === 'frozenheader') {
                            return child;
                        }
                    }
                }

                return null;
            },
            footerColumnGroup() {
                const children = this.getChildren();
                if (children) {
                    for (let child of children) {
                        if (child.type.name === 'columngroup' && this.columnProp(child, 'type') === 'footer') {
                            return child;
                        }
                    }
                }

                return null;
            },
            frozenFooterColumnGroup() {
               const children = this.getChildren();
                if (children) {
                    for (let child of children) {
                        if (child.type.name === 'columngroup' && this.columnProp(child, 'type') === 'frozenfooter') {
                            return child;
                        }
                    }
               }

                return null;
            },
            processedData() {
                if (this.lazy) {
                    return this.value;
                }
                else {
                    if (this.value && this.value.length) {
                        let data = this.value;

                        if (this.sorted) {
                            if(this.sortMode === 'single')
                                data = this.sortSingle(data);
                            else if(this.sortMode === 'multiple')
                                data = this.sortMultiple(data);
                        }

                        if (this.hasFilters()) {
                            data = this.filter(data);
                        }

                        return data;
                    }
                    else {
                        return null;
                    }
                }
            },
            dataToRender() {
                const data = this.processedData;

                if (data && this.paginator) {
                    const first = this.lazy ? 0 : this.d_first;
                    return data.slice(first, first + this.d_rows);
                }
                else {
                    return data;
                }
            },
            totalRecordsLength() {
                if (this.lazy) {
                    return this.totalRecords;
                }
                else {
                    const data = this.processedData;
                    return data ? data.length : 0;
                }
            },
            empty() {
                const data = this.processedData;
                return (!data || data.length === 0);
            },
            paginatorTop() {
                return this.paginator && (this.paginatorPosition !== 'bottom' || this.paginatorPosition === 'both');
            },
            paginatorBottom() {
                return this.paginator && (this.paginatorPosition !== 'top' || this.paginatorPosition === 'both');
            },
            sorted() {
                return this.d_sortField || (this.d_multiSortMeta && this.d_multiSortMeta.length > 0);
            },
            loadingIconClass() {
                return ['p-datatable-loading-icon pi-spin', this.loadingIcon];
            },
            allRowsSelected() {
                const val = this.processedData;
                return (val && val.length > 0 && this.selection && this.selection.length > 0 && this.selection.length === val.length);
            }
        },
        components: {
            'DTPaginator': Paginator__default['default'],
            'DTScrollableView': script$1,
            'DTTableHeader': script$3,
            'DTTableBody': script$7,
            'DTTableFooter': script$8,
        }
    };

    const _hoisted_1$7 = {
      key: 0,
      class: "p-datatable-loading-overlay p-component-overlay"
    };
    const _hoisted_2$5 = {
      key: 1,
      class: "p-datatable-header"
    };
    const _hoisted_3$3 = {
      key: 3,
      class: "p-datatable-wrapper"
    };
    const _hoisted_4$2 = {
      ref: "table",
      role: "grid"
    };
    const _hoisted_5$2 = {
      key: 4,
      class: "p-datatable-scrollable-wrapper"
    };
    const _hoisted_6$2 = {
      key: 6,
      class: "p-datatable-footer"
    };
    const _hoisted_7$1 = {
      ref: "resizeHelper",
      class: "p-column-resizer-helper",
      style: {"display":"none"}
    };
    const _hoisted_8 = {
      key: 7,
      ref: "reorderIndicatorUp",
      class: "pi pi-arrow-down p-datatable-reorder-indicator-up",
      style: {"position":"absolute","display":"none"}
    };
    const _hoisted_9 = {
      key: 8,
      ref: "reorderIndicatorDown",
      class: "pi pi-arrow-up p-datatable-reorder-indicator-down",
      style: {"position":"absolute","display":"none"}
    };

    function render$9(_ctx, _cache, $props, $setup, $data, $options) {
      const _component_DTPaginator = vue.resolveComponent("DTPaginator");
      const _component_DTTableHeader = vue.resolveComponent("DTTableHeader");
      const _component_DTTableBody = vue.resolveComponent("DTTableBody");
      const _component_DTTableFooter = vue.resolveComponent("DTTableFooter");
      const _component_DTScrollableView = vue.resolveComponent("DTScrollableView");

      return (vue.openBlock(), vue.createBlock("div", {
        class: $options.containerClass,
        "data-scrollselectors": ".p-datatable-scrollable-body, .p-datatable-unfrozen-view .p-datatable-scrollable-body"
      }, [
        vue.renderSlot(_ctx.$slots, "default"),
        ($props.loading)
          ? (vue.openBlock(), vue.createBlock("div", _hoisted_1$7, [
              vue.createVNode("i", { class: $options.loadingIconClass }, null, 2)
            ]))
          : vue.createCommentVNode("", true),
        (_ctx.$slots.header)
          ? (vue.openBlock(), vue.createBlock("div", _hoisted_2$5, [
              vue.renderSlot(_ctx.$slots, "header")
            ]))
          : vue.createCommentVNode("", true),
        ($options.paginatorTop)
          ? (vue.openBlock(), vue.createBlock(_component_DTPaginator, {
              key: 2,
              rows: $data.d_rows,
              first: $data.d_first,
              totalRecords: $options.totalRecordsLength,
              pageLinkSize: $props.pageLinkSize,
              template: $props.paginatorTemplate,
              rowsPerPageOptions: $props.rowsPerPageOptions,
              currentPageReportTemplate: $props.currentPageReportTemplate,
              class: "p-paginator-top",
              onPage: _cache[1] || (_cache[1] = $event => ($options.onPage($event))),
              alwaysShow: $props.alwaysShowPaginator
            }, vue.createSlots({ _: 2 }, [
              (_ctx.$slots.paginatorLeft)
                ? {
                    name: "left",
                    fn: vue.withCtx(() => [
                      vue.renderSlot(_ctx.$slots, "paginatorLeft")
                    ])
                  }
                : undefined,
              (_ctx.$slots.paginatorRight)
                ? {
                    name: "right",
                    fn: vue.withCtx(() => [
                      vue.renderSlot(_ctx.$slots, "paginatorRight")
                    ])
                  }
                : undefined
            ]), 1032, ["rows", "first", "totalRecords", "pageLinkSize", "template", "rowsPerPageOptions", "currentPageReportTemplate", "alwaysShow"]))
          : vue.createCommentVNode("", true),
        (!$props.scrollable)
          ? (vue.openBlock(), vue.createBlock("div", _hoisted_3$3, [
              vue.createVNode("table", _hoisted_4$2, [
                vue.createVNode(_component_DTTableHeader, {
                  columnGroup: $options.headerColumnGroup,
                  columns: $options.columns,
                  rowGroupMode: $props.rowGroupMode,
                  groupRowsBy: $props.groupRowsBy,
                  resizableColumns: $props.resizableColumns,
                  allRowsSelected: $options.allRowsSelected,
                  empty: $options.empty,
                  sortMode: $props.sortMode,
                  sortField: $data.d_sortField,
                  sortOrder: $data.d_sortOrder,
                  multiSortMeta: $data.d_multiSortMeta,
                  onColumnClick: _cache[2] || (_cache[2] = $event => ($options.onColumnHeaderClick($event))),
                  onColumnMousedown: _cache[3] || (_cache[3] = $event => ($options.onColumnHeaderMouseDown($event))),
                  onColumnDragstart: _cache[4] || (_cache[4] = $event => ($options.onColumnHeaderDragStart($event))),
                  onColumnDragover: _cache[5] || (_cache[5] = $event => ($options.onColumnHeaderDragOver($event))),
                  onColumnDragleave: _cache[6] || (_cache[6] = $event => ($options.onColumnHeaderDragLeave($event))),
                  onColumnDrop: _cache[7] || (_cache[7] = $event => ($options.onColumnHeaderDrop($event))),
                  onColumnResizestart: _cache[8] || (_cache[8] = $event => ($options.onColumnResizeStart($event))),
                  onCheckboxChange: _cache[9] || (_cache[9] = $event => ($options.toggleRowsWithCheckbox($event)))
                }, null, 8, ["columnGroup", "columns", "rowGroupMode", "groupRowsBy", "resizableColumns", "allRowsSelected", "empty", "sortMode", "sortField", "sortOrder", "multiSortMeta"]),
                vue.createVNode(_component_DTTableBody, {
                  value: $options.dataToRender,
                  columns: $options.columns,
                  empty: $options.empty,
                  dataKey: $props.dataKey,
                  selection: $props.selection,
                  selectionKeys: $data.d_selectionKeys,
                  selectionMode: $props.selectionMode,
                  contextMenu: $props.contextMenu,
                  contextMenuSelection: $props.contextMenuSelection,
                  rowGroupMode: $props.rowGroupMode,
                  groupRowsBy: $props.groupRowsBy,
                  expandableRowGroups: $props.expandableRowGroups,
                  rowClass: $props.rowClass,
                  editMode: $props.editMode,
                  compareSelectionBy: $props.compareSelectionBy,
                  expandedRowIcon: $props.expandedRowIcon,
                  collapsedRowIcon: $props.collapsedRowIcon,
                  expandedRows: $props.expandedRows,
                  expandedRowKeys: $data.d_expandedRowKeys,
                  expandedRowGroups: $props.expandedRowGroups,
                  editingRows: $props.editingRows,
                  editingRowKeys: $data.d_editingRowKeys,
                  templates: _ctx.$slots,
                  loading: $props.loading,
                  onRowgroupToggle: $options.toggleRowGroup,
                  onRowClick: _cache[10] || (_cache[10] = $event => ($options.onRowClick($event))),
                  onRowRightclick: _cache[11] || (_cache[11] = $event => ($options.onRowRightClick($event))),
                  onRowTouchend: $options.onRowTouchEnd,
                  onRowKeydown: $options.onRowKeyDown,
                  onRowMousedown: $options.onRowMouseDown,
                  onRowDragstart: _cache[12] || (_cache[12] = $event => ($options.onRowDragStart($event))),
                  onRowDragover: _cache[13] || (_cache[13] = $event => ($options.onRowDragOver($event))),
                  onRowDragleave: _cache[14] || (_cache[14] = $event => ($options.onRowDragLeave($event))),
                  onRowDragend: _cache[15] || (_cache[15] = $event => ($options.onRowDragEnd($event))),
                  onRowDrop: _cache[16] || (_cache[16] = $event => ($options.onRowDrop($event))),
                  onRowToggle: _cache[17] || (_cache[17] = $event => ($options.toggleRow($event))),
                  onRadioChange: _cache[18] || (_cache[18] = $event => ($options.toggleRowWithRadio($event))),
                  onCheckboxChange: _cache[19] || (_cache[19] = $event => ($options.toggleRowWithCheckbox($event))),
                  onCellEditInit: _cache[20] || (_cache[20] = $event => ($options.onCellEditInit($event))),
                  onCellEditComplete: _cache[21] || (_cache[21] = $event => ($options.onCellEditComplete($event))),
                  onCellEditCancel: _cache[22] || (_cache[22] = $event => ($options.onCellEditCancel($event))),
                  onRowEditInit: _cache[23] || (_cache[23] = $event => ($options.onRowEditInit($event))),
                  onRowEditSave: _cache[24] || (_cache[24] = $event => ($options.onRowEditSave($event))),
                  onRowEditCancel: _cache[25] || (_cache[25] = $event => ($options.onRowEditCancel($event)))
                }, null, 8, ["value", "columns", "empty", "dataKey", "selection", "selectionKeys", "selectionMode", "contextMenu", "contextMenuSelection", "rowGroupMode", "groupRowsBy", "expandableRowGroups", "rowClass", "editMode", "compareSelectionBy", "expandedRowIcon", "collapsedRowIcon", "expandedRows", "expandedRowKeys", "expandedRowGroups", "editingRows", "editingRowKeys", "templates", "loading", "onRowgroupToggle", "onRowTouchend", "onRowKeydown", "onRowMousedown"]),
                vue.createVNode(_component_DTTableFooter, {
                  columnGroup: $options.footerColumnGroup,
                  columns: $options.columns
                }, null, 8, ["columnGroup", "columns"])
              ], 512)
            ]))
          : (vue.openBlock(), vue.createBlock("div", _hoisted_5$2, [
              ($options.hasFrozenColumns)
                ? (vue.openBlock(), vue.createBlock(_component_DTScrollableView, {
                    key: 0,
                    scrollHeight: $props.scrollHeight,
                    columns: $options.frozenColumns,
                    frozenWidth: $props.frozenWidth,
                    frozen: true,
                    rowGroupMode: $props.rowGroupMode,
                    groupRowsBy: $props.groupRowsBy,
                    headerColumnGroup: $options.frozenHeaderColumnGroup,
                    footerColumnGroup: $options.frozenFooterColumnGroup
                  }, {
                    header: vue.withCtx((slotProps) => [
                      vue.createVNode(_component_DTTableHeader, {
                        columnGroup: slotProps.columnGroup,
                        columns: slotProps.columns,
                        rowGroupMode: $props.rowGroupMode,
                        groupRowsBy: $props.groupRowsBy,
                        resizableColumns: $props.resizableColumns,
                        allRowsSelected: $options.allRowsSelected,
                        empty: $options.empty,
                        sortMode: $props.sortMode,
                        sortField: $data.d_sortField,
                        sortOrder: $data.d_sortOrder,
                        multiSortMeta: $data.d_multiSortMeta,
                        onColumnClick: _cache[26] || (_cache[26] = $event => ($options.onColumnHeaderClick($event))),
                        onColumnMousedown: _cache[27] || (_cache[27] = $event => ($options.onColumnHeaderMouseDown($event))),
                        onColumnDragstart: _cache[28] || (_cache[28] = $event => ($options.onColumnHeaderDragStart($event))),
                        onColumnDragover: _cache[29] || (_cache[29] = $event => ($options.onColumnHeaderDragOver($event))),
                        onColumnDragleave: _cache[30] || (_cache[30] = $event => ($options.onColumnHeaderDragLeave($event))),
                        onColumnDrop: _cache[31] || (_cache[31] = $event => ($options.onColumnHeaderDrop($event))),
                        onColumnResizestart: _cache[32] || (_cache[32] = $event => ($options.onColumnResizeStart($event))),
                        onCheckboxChange: _cache[33] || (_cache[33] = $event => ($options.toggleRowsWithCheckbox($event)))
                      }, null, 8, ["columnGroup", "columns", "rowGroupMode", "groupRowsBy", "resizableColumns", "allRowsSelected", "empty", "sortMode", "sortField", "sortOrder", "multiSortMeta"])
                    ]),
                    body: vue.withCtx((slotProps) => [
                      vue.createVNode(_component_DTTableBody, {
                        value: $options.dataToRender,
                        columns: slotProps.columns,
                        empty: $options.empty,
                        dataKey: $props.dataKey,
                        selection: $props.selection,
                        selectionKeys: $data.d_selectionKeys,
                        selectionMode: $props.selectionMode,
                        contextMenu: $props.contextMenu,
                        contextMenuSelection: $props.contextMenuSelection,
                        rowGroupMode: $props.rowGroupMode,
                        groupRowsBy: $props.groupRowsBy,
                        expandableRowGroups: $props.expandableRowGroups,
                        rowClass: $props.rowClass,
                        editMode: $props.editMode,
                        compareSelectionBy: $props.compareSelectionBy,
                        expandedRowIcon: $props.expandedRowIcon,
                        collapsedRowIcon: $props.collapsedRowIcon,
                        expandedRows: $props.expandedRows,
                        expandedRowKeys: $data.d_expandedRowKeys,
                        expandedRowGroups: $props.expandedRowGroups,
                        editingRows: $props.editingRows,
                        editingRowKeys: $data.d_editingRowKeys,
                        templates: _ctx.$slots,
                        loading: $props.loading,
                        onRowgroupToggle: $options.toggleRowGroup,
                        onRowClick: _cache[34] || (_cache[34] = $event => ($options.onRowClick($event))),
                        onRowRightclick: _cache[35] || (_cache[35] = $event => ($options.onRowRightClick($event))),
                        onRowTouchend: $options.onRowTouchEnd,
                        onRowKeydown: $options.onRowKeyDown,
                        onRowMousedown: $options.onRowMouseDown,
                        onRowDragstart: _cache[36] || (_cache[36] = $event => ($options.onRowDragStart($event))),
                        onRowDragover: _cache[37] || (_cache[37] = $event => ($options.onRowDragOver($event))),
                        onRowDragleave: _cache[38] || (_cache[38] = $event => ($options.onRowDragLeave($event))),
                        onRowDragend: _cache[39] || (_cache[39] = $event => ($options.onRowDragEnd($event))),
                        onRowDrop: _cache[40] || (_cache[40] = $event => ($options.onRowDrop($event))),
                        onRowToggle: _cache[41] || (_cache[41] = $event => ($options.toggleRow($event))),
                        onRadioChange: _cache[42] || (_cache[42] = $event => ($options.toggleRowWithRadio($event))),
                        onCheckboxChange: _cache[43] || (_cache[43] = $event => ($options.toggleRowWithCheckbox($event))),
                        onCellEditInit: _cache[44] || (_cache[44] = $event => ($options.onCellEditInit($event))),
                        onCellEditComplete: _cache[45] || (_cache[45] = $event => ($options.onCellEditComplete($event))),
                        onCellEditCancel: _cache[46] || (_cache[46] = $event => ($options.onCellEditCancel($event))),
                        onRowEditInit: _cache[47] || (_cache[47] = $event => ($options.onRowEditInit($event))),
                        onRowEditSave: _cache[48] || (_cache[48] = $event => ($options.onRowEditSave($event))),
                        onRowEditCancel: _cache[49] || (_cache[49] = $event => ($options.onRowEditCancel($event)))
                      }, null, 8, ["value", "columns", "empty", "dataKey", "selection", "selectionKeys", "selectionMode", "contextMenu", "contextMenuSelection", "rowGroupMode", "groupRowsBy", "expandableRowGroups", "rowClass", "editMode", "compareSelectionBy", "expandedRowIcon", "collapsedRowIcon", "expandedRows", "expandedRowKeys", "expandedRowGroups", "editingRows", "editingRowKeys", "templates", "loading", "onRowgroupToggle", "onRowTouchend", "onRowKeydown", "onRowMousedown"])
                    ]),
                    frozenbody: vue.withCtx((slotProps) => [
                      ($props.frozenValue)
                        ? (vue.openBlock(), vue.createBlock(_component_DTTableBody, {
                            key: 0,
                            value: $props.frozenValue,
                            columns: slotProps.columns,
                            dataKey: $props.dataKey,
                            selection: $props.selection,
                            selectionKeys: $data.d_selectionKeys,
                            selectionMode: $props.selectionMode,
                            contextMenu: $props.contextMenu,
                            contextMenuSelection: $props.contextMenuSelection,
                            rowGroupMode: $props.rowGroupMode,
                            groupRowsBy: $props.groupRowsBy,
                            expandableRowGroups: $props.expandableRowGroups,
                            rowClass: $props.rowClass,
                            editMode: $props.editMode,
                            compareSelectionBy: $props.compareSelectionBy,
                            expandedRowIcon: $props.expandedRowIcon,
                            collapsedRowIcon: $props.collapsedRowIcon,
                            expandedRows: $props.expandedRows,
                            expandedRowKeys: $data.d_expandedRowKeys,
                            expandedRowGroups: $props.expandedRowGroups,
                            editingRows: $props.editingRows,
                            editingRowKeys: $data.d_editingRowKeys,
                            templates: _ctx.$slots,
                            loading: $props.loading,
                            onRowgroupToggle: $options.toggleRowGroup,
                            onRowClick: _cache[50] || (_cache[50] = $event => ($options.onRowClick($event))),
                            onRowRightclick: _cache[51] || (_cache[51] = $event => ($options.onRowRightClick($event))),
                            onRowTouchend: $options.onRowTouchEnd,
                            onRowKeydown: $options.onRowKeyDown,
                            onRowMousedown: $options.onRowMouseDown,
                            onRowDragstart: _cache[52] || (_cache[52] = $event => ($options.onRowDragStart($event))),
                            onRowDragover: _cache[53] || (_cache[53] = $event => ($options.onRowDragOver($event))),
                            onRowDragleave: _cache[54] || (_cache[54] = $event => ($options.onRowDragLeave($event))),
                            onRowDragend: _cache[55] || (_cache[55] = $event => ($options.onRowDragEnd($event))),
                            onRowDrop: _cache[56] || (_cache[56] = $event => ($options.onRowDrop($event))),
                            onRowToggle: _cache[57] || (_cache[57] = $event => ($options.toggleRow($event))),
                            onRadioChange: _cache[58] || (_cache[58] = $event => ($options.toggleRowWithRadio($event))),
                            onCheckboxChange: _cache[59] || (_cache[59] = $event => ($options.toggleRowWithCheckbox($event))),
                            onCellEditInit: _cache[60] || (_cache[60] = $event => ($options.onCellEditInit($event))),
                            onCellEditComplete: _cache[61] || (_cache[61] = $event => ($options.onCellEditComplete($event))),
                            onCellEditCancel: _cache[62] || (_cache[62] = $event => ($options.onCellEditCancel($event))),
                            onRowEditInit: _cache[63] || (_cache[63] = $event => ($options.onRowEditInit($event))),
                            onRowEditSave: _cache[64] || (_cache[64] = $event => ($options.onRowEditSave($event))),
                            onRowEditCancel: _cache[65] || (_cache[65] = $event => ($options.onRowEditCancel($event)))
                          }, null, 8, ["value", "columns", "dataKey", "selection", "selectionKeys", "selectionMode", "contextMenu", "contextMenuSelection", "rowGroupMode", "groupRowsBy", "expandableRowGroups", "rowClass", "editMode", "compareSelectionBy", "expandedRowIcon", "collapsedRowIcon", "expandedRows", "expandedRowKeys", "expandedRowGroups", "editingRows", "editingRowKeys", "templates", "loading", "onRowgroupToggle", "onRowTouchend", "onRowKeydown", "onRowMousedown"]))
                        : vue.createCommentVNode("", true)
                    ]),
                    footer: vue.withCtx((slotProps) => [
                      vue.createVNode(_component_DTTableFooter, {
                        columnGroup: slotProps.columnGroup,
                        columns: slotProps.columns
                      }, null, 8, ["columnGroup", "columns"])
                    ]),
                    _: 1
                  }, 8, ["scrollHeight", "columns", "frozenWidth", "rowGroupMode", "groupRowsBy", "headerColumnGroup", "footerColumnGroup"]))
                : vue.createCommentVNode("", true),
              vue.createVNode(_component_DTScrollableView, {
                scrollHeight: $props.scrollHeight,
                columns: $options.scrollableColumns,
                frozenWidth: $props.frozenWidth,
                rows: $props.rows,
                virtualScroll: $props.virtualScroll,
                virtualRowHeight: $props.virtualRowHeight,
                totalRecords: $options.totalRecordsLength,
                onVirtualScroll: $options.onVirtualScroll,
                rowGroupMode: $props.rowGroupMode,
                groupRowsBy: $props.groupRowsBy,
                headerColumnGroup: $options.headerColumnGroup,
                footerColumnGroup: $options.footerColumnGroup
              }, {
                header: vue.withCtx((slotProps) => [
                  vue.createVNode(_component_DTTableHeader, {
                    columnGroup: slotProps.columnGroup,
                    columns: slotProps.columns,
                    rowGroupMode: $props.rowGroupMode,
                    groupRowsBy: $props.groupRowsBy,
                    resizableColumns: $props.resizableColumns,
                    allRowsSelected: $options.allRowsSelected,
                    empty: $options.empty,
                    sortMode: $props.sortMode,
                    sortField: $data.d_sortField,
                    sortOrder: $data.d_sortOrder,
                    multiSortMeta: $data.d_multiSortMeta,
                    onColumnClick: _cache[66] || (_cache[66] = $event => ($options.onColumnHeaderClick($event))),
                    onColumnMousedown: _cache[67] || (_cache[67] = $event => ($options.onColumnHeaderMouseDown($event))),
                    onColumnDragstart: _cache[68] || (_cache[68] = $event => ($options.onColumnHeaderDragStart($event))),
                    onColumnDragover: _cache[69] || (_cache[69] = $event => ($options.onColumnHeaderDragOver($event))),
                    onColumnDragleave: _cache[70] || (_cache[70] = $event => ($options.onColumnHeaderDragLeave($event))),
                    onColumnDrop: _cache[71] || (_cache[71] = $event => ($options.onColumnHeaderDrop($event))),
                    onColumnResizestart: _cache[72] || (_cache[72] = $event => ($options.onColumnResizeStart($event))),
                    onCheckboxChange: _cache[73] || (_cache[73] = $event => ($options.toggleRowsWithCheckbox($event)))
                  }, null, 8, ["columnGroup", "columns", "rowGroupMode", "groupRowsBy", "resizableColumns", "allRowsSelected", "empty", "sortMode", "sortField", "sortOrder", "multiSortMeta"])
                ]),
                body: vue.withCtx((slotProps) => [
                  vue.createVNode(_component_DTTableBody, {
                    value: $options.dataToRender,
                    columns: slotProps.columns,
                    empty: $options.empty,
                    dataKey: $props.dataKey,
                    selection: $props.selection,
                    selectionKeys: $data.d_selectionKeys,
                    selectionMode: $props.selectionMode,
                    contextMenu: $props.contextMenu,
                    contextMenuSelection: $props.contextMenuSelection,
                    rowGroupMode: $props.rowGroupMode,
                    groupRowsBy: $props.groupRowsBy,
                    expandableRowGroups: $props.expandableRowGroups,
                    rowClass: $props.rowClass,
                    editMode: $props.editMode,
                    compareSelectionBy: $props.compareSelectionBy,
                    expandedRowIcon: $props.expandedRowIcon,
                    collapsedRowIcon: $props.collapsedRowIcon,
                    expandedRows: $props.expandedRows,
                    expandedRowKeys: $data.d_expandedRowKeys,
                    expandedRowGroups: $props.expandedRowGroups,
                    editingRows: $props.editingRows,
                    editingRowKeys: $data.d_editingRowKeys,
                    templates: _ctx.$slots,
                    loading: $props.loading,
                    onRowgroupToggle: $options.toggleRowGroup,
                    onRowClick: _cache[74] || (_cache[74] = $event => ($options.onRowClick($event))),
                    onRowRightclick: _cache[75] || (_cache[75] = $event => ($options.onRowRightClick($event))),
                    onRowTouchend: $options.onRowTouchEnd,
                    onRowKeydown: $options.onRowKeyDown,
                    onRowMousedown: $options.onRowMouseDown,
                    onRowDragstart: _cache[76] || (_cache[76] = $event => ($options.onRowDragStart($event))),
                    onRowDragover: _cache[77] || (_cache[77] = $event => ($options.onRowDragOver($event))),
                    onRowDragleave: _cache[78] || (_cache[78] = $event => ($options.onRowDragLeave($event))),
                    onRowDragend: _cache[79] || (_cache[79] = $event => ($options.onRowDragEnd($event))),
                    onRowDrop: _cache[80] || (_cache[80] = $event => ($options.onRowDrop($event))),
                    onRowToggle: _cache[81] || (_cache[81] = $event => ($options.toggleRow($event))),
                    onRadioChange: _cache[82] || (_cache[82] = $event => ($options.toggleRowWithRadio($event))),
                    onCheckboxChange: _cache[83] || (_cache[83] = $event => ($options.toggleRowWithCheckbox($event))),
                    onCellEditInit: _cache[84] || (_cache[84] = $event => ($options.onCellEditInit($event))),
                    onCellEditComplete: _cache[85] || (_cache[85] = $event => ($options.onCellEditComplete($event))),
                    onCellEditCancel: _cache[86] || (_cache[86] = $event => ($options.onCellEditCancel($event))),
                    onRowEditInit: _cache[87] || (_cache[87] = $event => ($options.onRowEditInit($event))),
                    onRowEditSave: _cache[88] || (_cache[88] = $event => ($options.onRowEditSave($event))),
                    onRowEditCancel: _cache[89] || (_cache[89] = $event => ($options.onRowEditCancel($event)))
                  }, null, 8, ["value", "columns", "empty", "dataKey", "selection", "selectionKeys", "selectionMode", "contextMenu", "contextMenuSelection", "rowGroupMode", "groupRowsBy", "expandableRowGroups", "rowClass", "editMode", "compareSelectionBy", "expandedRowIcon", "collapsedRowIcon", "expandedRows", "expandedRowKeys", "expandedRowGroups", "editingRows", "editingRowKeys", "templates", "loading", "onRowgroupToggle", "onRowTouchend", "onRowKeydown", "onRowMousedown"])
                ]),
                frozenbody: vue.withCtx((slotProps) => [
                  ($props.frozenValue)
                    ? (vue.openBlock(), vue.createBlock(_component_DTTableBody, {
                        key: 0,
                        value: $props.frozenValue,
                        columns: slotProps.columns,
                        dataKey: $props.dataKey,
                        selection: $props.selection,
                        selectionKeys: $data.d_selectionKeys,
                        selectionMode: $props.selectionMode,
                        contextMenu: $props.contextMenu,
                        contextMenuSelection: $props.contextMenuSelection,
                        rowGroupMode: $props.rowGroupMode,
                        groupRowsBy: $props.groupRowsBy,
                        expandableRowGroups: $props.expandableRowGroups,
                        rowClass: $props.rowClass,
                        editMode: $props.editMode,
                        compareSelectionBy: $props.compareSelectionBy,
                        expandedRowIcon: $props.expandedRowIcon,
                        collapsedRowIcon: $props.collapsedRowIcon,
                        expandedRows: $props.expandedRows,
                        expandedRowKeys: $data.d_expandedRowKeys,
                        expandedRowGroups: $props.expandedRowGroups,
                        editingRows: $props.editingRows,
                        editingRowKeys: $data.d_editingRowKeys,
                        templates: _ctx.$slots,
                        loading: $props.loading,
                        onRowgroupToggle: $options.toggleRowGroup,
                        onRowClick: _cache[90] || (_cache[90] = $event => ($options.onRowClick($event))),
                        onRowRightclick: _cache[91] || (_cache[91] = $event => ($options.onRowRightClick($event))),
                        onRowTouchend: $options.onRowTouchEnd,
                        onRowKeydown: $options.onRowKeyDown,
                        onRowMousedown: $options.onRowMouseDown,
                        onRowDragstart: _cache[92] || (_cache[92] = $event => ($options.onRowDragStart($event))),
                        onRowDragover: _cache[93] || (_cache[93] = $event => ($options.onRowDragOver($event))),
                        onRowDragleave: _cache[94] || (_cache[94] = $event => ($options.onRowDragLeave($event))),
                        onRowDragend: _cache[95] || (_cache[95] = $event => ($options.onRowDragEnd($event))),
                        onRowDrop: _cache[96] || (_cache[96] = $event => ($options.onRowDrop($event))),
                        onRowToggle: _cache[97] || (_cache[97] = $event => ($options.toggleRow($event))),
                        onRadioChange: _cache[98] || (_cache[98] = $event => ($options.toggleRowWithRadio($event))),
                        onCheckboxChange: _cache[99] || (_cache[99] = $event => ($options.toggleRowWithCheckbox($event))),
                        onCellEditInit: _cache[100] || (_cache[100] = $event => ($options.onCellEditInit($event))),
                        onCellEditComplete: _cache[101] || (_cache[101] = $event => ($options.onCellEditComplete($event))),
                        onCellEditCancel: _cache[102] || (_cache[102] = $event => ($options.onCellEditCancel($event))),
                        onRowEditInit: _cache[103] || (_cache[103] = $event => ($options.onRowEditInit($event))),
                        onRowEditSave: _cache[104] || (_cache[104] = $event => ($options.onRowEditSave($event))),
                        onRowEditCancel: _cache[105] || (_cache[105] = $event => ($options.onRowEditCancel($event)))
                      }, null, 8, ["value", "columns", "dataKey", "selection", "selectionKeys", "selectionMode", "contextMenu", "contextMenuSelection", "rowGroupMode", "groupRowsBy", "expandableRowGroups", "rowClass", "editMode", "compareSelectionBy", "expandedRowIcon", "collapsedRowIcon", "expandedRows", "expandedRowKeys", "expandedRowGroups", "editingRows", "editingRowKeys", "templates", "loading", "onRowgroupToggle", "onRowTouchend", "onRowKeydown", "onRowMousedown"]))
                    : vue.createCommentVNode("", true)
                ]),
                footer: vue.withCtx((slotProps) => [
                  vue.createVNode(_component_DTTableFooter, {
                    columnGroup: slotProps.columnGroup,
                    columns: slotProps.columns
                  }, null, 8, ["columnGroup", "columns"])
                ]),
                _: 1
              }, 8, ["scrollHeight", "columns", "frozenWidth", "rows", "virtualScroll", "virtualRowHeight", "totalRecords", "onVirtualScroll", "rowGroupMode", "groupRowsBy", "headerColumnGroup", "footerColumnGroup"])
            ])),
        ($options.paginatorBottom)
          ? (vue.openBlock(), vue.createBlock(_component_DTPaginator, {
              key: 5,
              rows: $data.d_rows,
              first: $data.d_first,
              totalRecords: $options.totalRecordsLength,
              pageLinkSize: $props.pageLinkSize,
              template: $props.paginatorTemplate,
              rowsPerPageOptions: $props.rowsPerPageOptions,
              currentPageReportTemplate: $props.currentPageReportTemplate,
              class: "p-paginator-bottom",
              onPage: _cache[106] || (_cache[106] = $event => ($options.onPage($event))),
              alwaysShow: $props.alwaysShowPaginator
            }, vue.createSlots({ _: 2 }, [
              (_ctx.$slots.paginatorLeft)
                ? {
                    name: "left",
                    fn: vue.withCtx(() => [
                      vue.renderSlot(_ctx.$slots, "paginatorLeft")
                    ])
                  }
                : undefined,
              (_ctx.$slots.paginatorRight)
                ? {
                    name: "right",
                    fn: vue.withCtx(() => [
                      vue.renderSlot(_ctx.$slots, "paginatorRight")
                    ])
                  }
                : undefined
            ]), 1032, ["rows", "first", "totalRecords", "pageLinkSize", "template", "rowsPerPageOptions", "currentPageReportTemplate", "alwaysShow"]))
          : vue.createCommentVNode("", true),
        (_ctx.$slots.footer)
          ? (vue.openBlock(), vue.createBlock("div", _hoisted_6$2, [
              vue.renderSlot(_ctx.$slots, "footer")
            ]))
          : vue.createCommentVNode("", true),
        vue.createVNode("div", _hoisted_7$1, null, 512),
        ($props.reorderableColumns)
          ? (vue.openBlock(), vue.createBlock("span", _hoisted_8, null, 512))
          : vue.createCommentVNode("", true),
        ($props.reorderableColumns)
          ? (vue.openBlock(), vue.createBlock("span", _hoisted_9, null, 512))
          : vue.createCommentVNode("", true)
      ], 2))
    }

    function styleInject(css, ref) {
      if ( ref === void 0 ) ref = {};
      var insertAt = ref.insertAt;

      if (!css || typeof document === 'undefined') { return; }

      var head = document.head || document.getElementsByTagName('head')[0];
      var style = document.createElement('style');
      style.type = 'text/css';

      if (insertAt === 'top') {
        if (head.firstChild) {
          head.insertBefore(style, head.firstChild);
        } else {
          head.appendChild(style);
        }
      } else {
        head.appendChild(style);
      }

      if (style.styleSheet) {
        style.styleSheet.cssText = css;
      } else {
        style.appendChild(document.createTextNode(css));
      }
    }

    var css_248z = "\n.p-datatable {\n    position: relative;\n}\n.p-datatable table {\n    border-collapse: collapse;\n    width: 100%;\n    table-layout: fixed;\n}\n.p-datatable .p-sortable-column {\n    cursor: pointer;\n    -webkit-user-select: none;\n       -moz-user-select: none;\n        -ms-user-select: none;\n            user-select: none;\n}\n.p-datatable .p-sortable-column .p-column-title,\n.p-datatable .p-sortable-column .p-sortable-column-icon,\n.p-datatable .p-sortable-column .p-sortable-column-badge {\n    vertical-align: middle;\n}\n.p-datatable .p-sortable-column .p-sortable-column-badge {\n    display: -webkit-inline-box;\n    display: -ms-inline-flexbox;\n    display: inline-flex;\n    -webkit-box-align: center;\n        -ms-flex-align: center;\n            align-items: center;\n    -webkit-box-pack: center;\n        -ms-flex-pack: center;\n            justify-content: center;\n}\n.p-datatable-auto-layout > .p-datatable-wrapper {\n    overflow-x: auto;\n}\n.p-datatable-auto-layout > .p-datatable-wrapper > table {\n    table-layout: auto;\n}\n.p-datatable-hoverable-rows .p-selectable-row {\n    cursor: pointer;\n}\n\n/* Scrollable */\n.p-datatable-scrollable-wrapper {\n    position: relative;\n}\n.p-datatable-scrollable-header,\n.p-datatable-scrollable-footer {\n    overflow: hidden;\n}\n.p-datatable-scrollable-body {\n    overflow: auto;\n    position: relative;\n}\n.p-datatable-scrollable-body > table > .p-datatable-tbody > tr:first-child > td {\n    border-top: 0 none;\n}\n.p-datatable-virtual-table {\n    position: absolute;\n}\n\n/* Frozen Columns */\n.p-datatable-frozen-view .p-datatable-scrollable-body {\n    overflow: hidden;\n}\n.p-datatable-frozen-view > .p-datatable-scrollable-body > table > .p-datatable-tbody > tr > td:last-child {\n    border-right: 0 none;\n}\n.p-datatable-unfrozen-view {\n    position: absolute;\n    top: 0;\n}\n\n/* Flex Scrollable */\n.p-datatable-flex-scrollable {\n    display: -webkit-box;\n    display: -ms-flexbox;\n    display: flex;\n    -webkit-box-orient: vertical;\n    -webkit-box-direction: normal;\n        -ms-flex-direction: column;\n            flex-direction: column;\n    -webkit-box-flex: 1;\n        -ms-flex: 1;\n            flex: 1;\n    height: 100%;\n}\n.p-datatable-flex-scrollable .p-datatable-scrollable-wrapper,\n.p-datatable-flex-scrollable .p-datatable-scrollable-view {\n    display: -webkit-box;\n    display: -ms-flexbox;\n    display: flex;\n    -webkit-box-orient: vertical;\n    -webkit-box-direction: normal;\n        -ms-flex-direction: column;\n            flex-direction: column;\n    -webkit-box-flex: 1;\n        -ms-flex: 1;\n            flex: 1;\n    height: 100%;\n}\n.p-datatable-flex-scrollable .p-datatable-scrollable-body {\n    -webkit-box-flex: 1;\n        -ms-flex: 1;\n            flex: 1;\n}\n\n/* Resizable */\n.p-datatable-resizable > .p-datatable-wrapper {\n    overflow-x: auto;\n}\n.p-datatable-resizable .p-datatable-thead > tr > th,\n.p-datatable-resizable .p-datatable-tfoot > tr > td,\n.p-datatable-resizable .p-datatable-tbody > tr > td {\n    overflow: hidden;\n    white-space: nowrap;\n}\n.p-datatable-resizable .p-resizable-column {\n    background-clip: padding-box;\n    position: relative;\n}\n.p-datatable-resizable-fit .p-resizable-column:last-child .p-column-resizer {\n    display: none;\n}\n.p-datatable .p-column-resizer {\n    display: block;\n    position: absolute !important;\n    top: 0;\n    right: 0;\n    margin: 0;\n    width: .5rem;\n    height: 100%;\n    padding: 0px;\n    cursor:col-resize;\n    border: 1px solid transparent;\n}\n.p-datatable .p-column-resizer-helper {\n    width: 1px;\n    position: absolute;\n    z-index: 10;\n    display: none;\n}\n.p-datatable .p-row-editor-init,\n.p-datatable .p-row-editor-save,\n.p-datatable .p-row-editor-cancel {\n    display: -webkit-inline-box;\n    display: -ms-inline-flexbox;\n    display: inline-flex;\n    -webkit-box-align: center;\n        -ms-flex-align: center;\n            align-items: center;\n    -webkit-box-pack: center;\n        -ms-flex-pack: center;\n            justify-content: center;\n    overflow: hidden;\n    position: relative;\n}\n\n/* Expand */\n.p-datatable .p-row-toggler {\n    display: -webkit-inline-box;\n    display: -ms-inline-flexbox;\n    display: inline-flex;\n    -webkit-box-align: center;\n        -ms-flex-align: center;\n            align-items: center;\n    -webkit-box-pack: center;\n        -ms-flex-pack: center;\n            justify-content: center;\n    overflow: hidden;\n    position: relative;\n}\n\n/* Reorder */\n.p-datatable-reorder-indicator-up,\n.p-datatable-reorder-indicator-down {\n    position: absolute;\n    display: none;\n}\n\n/* Loader */\n.p-datatable .p-datatable-loading-overlay {\n    position: absolute;\n    display: -webkit-box;\n    display: -ms-flexbox;\n    display: flex;\n    -webkit-box-align: center;\n        -ms-flex-align: center;\n            align-items: center;\n    -webkit-box-pack: center;\n        -ms-flex-pack: center;\n            justify-content: center;\n    z-index: 2;\n}\n";
    styleInject(css_248z);

    script$9.render = render$9;

    return script$9;

}(primevue.utils, primevue.paginator, Vue, primevue.ripple));
